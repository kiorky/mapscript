# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _mapscript
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class intarray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intarray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intarray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mapscript.new_intarray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_intarray
    __del__ = lambda self : None;
    def __getitem__(*args): return _mapscript.intarray___getitem__(*args)
    def __setitem__(*args): return _mapscript.intarray___setitem__(*args)
    def cast(*args): return _mapscript.intarray_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _mapscript.intarray_frompointer
    if _newclass:frompointer = staticmethod(_mapscript.intarray_frompointer)
intarray_swigregister = _mapscript.intarray_swigregister
intarray_swigregister(intarray)
intarray_frompointer = _mapscript.intarray_frompointer

MapServerError = _mapscript.MapServerError
MapServerChildError = _mapscript.MapServerChildError

MS_VERSION = _mapscript.MS_VERSION
MS_VERSION_MAJOR = _mapscript.MS_VERSION_MAJOR
MS_VERSION_MINOR = _mapscript.MS_VERSION_MINOR
MS_VERSION_REV = _mapscript.MS_VERSION_REV
MS_VERSION_NUM = _mapscript.MS_VERSION_NUM
MS_TRUE = _mapscript.MS_TRUE
MS_FALSE = _mapscript.MS_FALSE
MS_UNKNOWN = _mapscript.MS_UNKNOWN
MS_ON = _mapscript.MS_ON
MS_OFF = _mapscript.MS_OFF
MS_DEFAULT = _mapscript.MS_DEFAULT
MS_EMBED = _mapscript.MS_EMBED
MS_DELETE = _mapscript.MS_DELETE
MS_YES = _mapscript.MS_YES
MS_NO = _mapscript.MS_NO
MS_GD_ALPHA = _mapscript.MS_GD_ALPHA
MS_LAYER_ALLOCSIZE = _mapscript.MS_LAYER_ALLOCSIZE
MS_CLASS_ALLOCSIZE = _mapscript.MS_CLASS_ALLOCSIZE
MS_STYLE_ALLOCSIZE = _mapscript.MS_STYLE_ALLOCSIZE
MS_MAX_LABEL_PRIORITY = _mapscript.MS_MAX_LABEL_PRIORITY
MS_DEFAULT_LABEL_PRIORITY = _mapscript.MS_DEFAULT_LABEL_PRIORITY
MS_FILE_MAP = _mapscript.MS_FILE_MAP
MS_FILE_SYMBOL = _mapscript.MS_FILE_SYMBOL
MS_INCHES = _mapscript.MS_INCHES
MS_FEET = _mapscript.MS_FEET
MS_MILES = _mapscript.MS_MILES
MS_METERS = _mapscript.MS_METERS
MS_KILOMETERS = _mapscript.MS_KILOMETERS
MS_NAUTICALMILES = _mapscript.MS_NAUTICALMILES
MS_DD = _mapscript.MS_DD
MS_PIXELS = _mapscript.MS_PIXELS
MS_PERCENTAGES = _mapscript.MS_PERCENTAGES
MS_SHAPE_POINT = _mapscript.MS_SHAPE_POINT
MS_SHAPE_LINE = _mapscript.MS_SHAPE_LINE
MS_SHAPE_POLYGON = _mapscript.MS_SHAPE_POLYGON
MS_SHAPE_NULL = _mapscript.MS_SHAPE_NULL
MS_LAYER_POINT = _mapscript.MS_LAYER_POINT
MS_LAYER_LINE = _mapscript.MS_LAYER_LINE
MS_LAYER_POLYGON = _mapscript.MS_LAYER_POLYGON
MS_LAYER_RASTER = _mapscript.MS_LAYER_RASTER
MS_LAYER_ANNOTATION = _mapscript.MS_LAYER_ANNOTATION
MS_LAYER_QUERY = _mapscript.MS_LAYER_QUERY
MS_LAYER_CIRCLE = _mapscript.MS_LAYER_CIRCLE
MS_LAYER_TILEINDEX = _mapscript.MS_LAYER_TILEINDEX
MS_LAYER_CHART = _mapscript.MS_LAYER_CHART
MS_TRUETYPE = _mapscript.MS_TRUETYPE
MS_BITMAP = _mapscript.MS_BITMAP
MS_POSITIONS_LENGTH = _mapscript.MS_POSITIONS_LENGTH
MS_UL = _mapscript.MS_UL
MS_LR = _mapscript.MS_LR
MS_UR = _mapscript.MS_UR
MS_LL = _mapscript.MS_LL
MS_CR = _mapscript.MS_CR
MS_CL = _mapscript.MS_CL
MS_UC = _mapscript.MS_UC
MS_LC = _mapscript.MS_LC
MS_CC = _mapscript.MS_CC
MS_AUTO = _mapscript.MS_AUTO
MS_XY = _mapscript.MS_XY
MS_FOLLOW = _mapscript.MS_FOLLOW
MS_TINY = _mapscript.MS_TINY
MS_SMALL = _mapscript.MS_SMALL
MS_MEDIUM = _mapscript.MS_MEDIUM
MS_LARGE = _mapscript.MS_LARGE
MS_GIANT = _mapscript.MS_GIANT
MS_NORMAL = _mapscript.MS_NORMAL
MS_HILITE = _mapscript.MS_HILITE
MS_SELECTED = _mapscript.MS_SELECTED
MS_INLINE = _mapscript.MS_INLINE
MS_SHAPEFILE = _mapscript.MS_SHAPEFILE
MS_TILED_SHAPEFILE = _mapscript.MS_TILED_SHAPEFILE
MS_SDE = _mapscript.MS_SDE
MS_OGR = _mapscript.MS_OGR
MS_UNUSED_1 = _mapscript.MS_UNUSED_1
MS_POSTGIS = _mapscript.MS_POSTGIS
MS_WMS = _mapscript.MS_WMS
MS_ORACLESPATIAL = _mapscript.MS_ORACLESPATIAL
MS_WFS = _mapscript.MS_WFS
MS_GRATICULE = _mapscript.MS_GRATICULE
MS_MYGIS = _mapscript.MS_MYGIS
MS_RASTER = _mapscript.MS_RASTER
MS_PLUGIN = _mapscript.MS_PLUGIN
MS_DB_XBASE = _mapscript.MS_DB_XBASE
MS_DB_CSV = _mapscript.MS_DB_CSV
MS_DB_MYSQL = _mapscript.MS_DB_MYSQL
MS_DB_ORACLE = _mapscript.MS_DB_ORACLE
MS_DB_POSTGRES = _mapscript.MS_DB_POSTGRES
MS_JOIN_ONE_TO_ONE = _mapscript.MS_JOIN_ONE_TO_ONE
MS_JOIN_ONE_TO_MANY = _mapscript.MS_JOIN_ONE_TO_MANY
MS_SINGLE = _mapscript.MS_SINGLE
MS_MULTIPLE = _mapscript.MS_MULTIPLE
MS_QUERY_SINGLE = _mapscript.MS_QUERY_SINGLE
MS_QUERY_MULTIPLE = _mapscript.MS_QUERY_MULTIPLE
MS_QUERY_IS_NULL = _mapscript.MS_QUERY_IS_NULL
MS_QUERY_BY_POINT = _mapscript.MS_QUERY_BY_POINT
MS_QUERY_BY_RECT = _mapscript.MS_QUERY_BY_RECT
MS_QUERY_BY_SHAPE = _mapscript.MS_QUERY_BY_SHAPE
MS_QUERY_BY_ATTRIBUTE = _mapscript.MS_QUERY_BY_ATTRIBUTE
MS_QUERY_BY_INDEX = _mapscript.MS_QUERY_BY_INDEX
MS_QUERY_BY_OPERATOR = _mapscript.MS_QUERY_BY_OPERATOR
MS_ALIGN_LEFT = _mapscript.MS_ALIGN_LEFT
MS_ALIGN_CENTER = _mapscript.MS_ALIGN_CENTER
MS_ALIGN_RIGHT = _mapscript.MS_ALIGN_RIGHT
MS_CJC_NONE = _mapscript.MS_CJC_NONE
MS_CJC_BEVEL = _mapscript.MS_CJC_BEVEL
MS_CJC_BUTT = _mapscript.MS_CJC_BUTT
MS_CJC_MITER = _mapscript.MS_CJC_MITER
MS_CJC_ROUND = _mapscript.MS_CJC_ROUND
MS_CJC_SQUARE = _mapscript.MS_CJC_SQUARE
MS_CJC_TRIANGLE = _mapscript.MS_CJC_TRIANGLE
MS_SUCCESS = _mapscript.MS_SUCCESS
MS_FAILURE = _mapscript.MS_FAILURE
MS_DONE = _mapscript.MS_DONE
MS_IMAGEMODE_PC256 = _mapscript.MS_IMAGEMODE_PC256
MS_IMAGEMODE_RGB = _mapscript.MS_IMAGEMODE_RGB
MS_IMAGEMODE_RGBA = _mapscript.MS_IMAGEMODE_RGBA
MS_IMAGEMODE_INT16 = _mapscript.MS_IMAGEMODE_INT16
MS_IMAGEMODE_FLOAT32 = _mapscript.MS_IMAGEMODE_FLOAT32
MS_IMAGEMODE_BYTE = _mapscript.MS_IMAGEMODE_BYTE
MS_IMAGEMODE_NULL = _mapscript.MS_IMAGEMODE_NULL
MS_GEOS_EQUALS = _mapscript.MS_GEOS_EQUALS
MS_GEOS_DISJOINT = _mapscript.MS_GEOS_DISJOINT
MS_GEOS_TOUCHES = _mapscript.MS_GEOS_TOUCHES
MS_GEOS_OVERLAPS = _mapscript.MS_GEOS_OVERLAPS
MS_GEOS_CROSSES = _mapscript.MS_GEOS_CROSSES
MS_GEOS_INTERSECTS = _mapscript.MS_GEOS_INTERSECTS
MS_GEOS_WITHIN = _mapscript.MS_GEOS_WITHIN
MS_GEOS_CONTAINS = _mapscript.MS_GEOS_CONTAINS
MS_GEOS_BEYOND = _mapscript.MS_GEOS_BEYOND
MS_GEOS_DWITHIN = _mapscript.MS_GEOS_DWITHIN
class fontSetObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fontSetObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fontSetObj, name)
    __repr__ = _swig_repr
    __swig_getmethods__["filename"] = _mapscript.fontSetObj_filename_get
    if _newclass:filename = _swig_property(_mapscript.fontSetObj_filename_get)
    __swig_getmethods__["numfonts"] = _mapscript.fontSetObj_numfonts_get
    if _newclass:numfonts = _swig_property(_mapscript.fontSetObj_numfonts_get)
    __swig_getmethods__["fonts"] = _mapscript.fontSetObj_fonts_get
    if _newclass:fonts = _swig_property(_mapscript.fontSetObj_fonts_get)
    def __init__(self, *args): 
        this = _mapscript.new_fontSetObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_fontSetObj
    __del__ = lambda self : None;
fontSetObj_swigregister = _mapscript.fontSetObj_swigregister
fontSetObj_swigregister(fontSetObj)

class outputFormatObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, outputFormatObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, outputFormatObj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _mapscript.outputFormatObj_name_set
    __swig_getmethods__["name"] = _mapscript.outputFormatObj_name_get
    if _newclass:name = _swig_property(_mapscript.outputFormatObj_name_get, _mapscript.outputFormatObj_name_set)
    __swig_setmethods__["mimetype"] = _mapscript.outputFormatObj_mimetype_set
    __swig_getmethods__["mimetype"] = _mapscript.outputFormatObj_mimetype_get
    if _newclass:mimetype = _swig_property(_mapscript.outputFormatObj_mimetype_get, _mapscript.outputFormatObj_mimetype_set)
    __swig_setmethods__["driver"] = _mapscript.outputFormatObj_driver_set
    __swig_getmethods__["driver"] = _mapscript.outputFormatObj_driver_get
    if _newclass:driver = _swig_property(_mapscript.outputFormatObj_driver_get, _mapscript.outputFormatObj_driver_set)
    __swig_setmethods__["extension"] = _mapscript.outputFormatObj_extension_set
    __swig_getmethods__["extension"] = _mapscript.outputFormatObj_extension_get
    if _newclass:extension = _swig_property(_mapscript.outputFormatObj_extension_get, _mapscript.outputFormatObj_extension_set)
    __swig_setmethods__["renderer"] = _mapscript.outputFormatObj_renderer_set
    __swig_getmethods__["renderer"] = _mapscript.outputFormatObj_renderer_get
    if _newclass:renderer = _swig_property(_mapscript.outputFormatObj_renderer_get, _mapscript.outputFormatObj_renderer_set)
    __swig_setmethods__["imagemode"] = _mapscript.outputFormatObj_imagemode_set
    __swig_getmethods__["imagemode"] = _mapscript.outputFormatObj_imagemode_get
    if _newclass:imagemode = _swig_property(_mapscript.outputFormatObj_imagemode_get, _mapscript.outputFormatObj_imagemode_set)
    __swig_setmethods__["transparent"] = _mapscript.outputFormatObj_transparent_set
    __swig_getmethods__["transparent"] = _mapscript.outputFormatObj_transparent_get
    if _newclass:transparent = _swig_property(_mapscript.outputFormatObj_transparent_get, _mapscript.outputFormatObj_transparent_set)
    __swig_setmethods__["bands"] = _mapscript.outputFormatObj_bands_set
    __swig_getmethods__["bands"] = _mapscript.outputFormatObj_bands_get
    if _newclass:bands = _swig_property(_mapscript.outputFormatObj_bands_get, _mapscript.outputFormatObj_bands_set)
    __swig_setmethods__["numformatoptions"] = _mapscript.outputFormatObj_numformatoptions_set
    __swig_getmethods__["numformatoptions"] = _mapscript.outputFormatObj_numformatoptions_get
    if _newclass:numformatoptions = _swig_property(_mapscript.outputFormatObj_numformatoptions_get, _mapscript.outputFormatObj_numformatoptions_set)
    __swig_setmethods__["formatoptions"] = _mapscript.outputFormatObj_formatoptions_set
    __swig_getmethods__["formatoptions"] = _mapscript.outputFormatObj_formatoptions_get
    if _newclass:formatoptions = _swig_property(_mapscript.outputFormatObj_formatoptions_get, _mapscript.outputFormatObj_formatoptions_set)
    __swig_setmethods__["refcount"] = _mapscript.outputFormatObj_refcount_set
    __swig_getmethods__["refcount"] = _mapscript.outputFormatObj_refcount_get
    if _newclass:refcount = _swig_property(_mapscript.outputFormatObj_refcount_get, _mapscript.outputFormatObj_refcount_set)
    __swig_setmethods__["inmapfile"] = _mapscript.outputFormatObj_inmapfile_set
    __swig_getmethods__["inmapfile"] = _mapscript.outputFormatObj_inmapfile_get
    if _newclass:inmapfile = _swig_property(_mapscript.outputFormatObj_inmapfile_get, _mapscript.outputFormatObj_inmapfile_set)
    __swig_setmethods__["vtable"] = _mapscript.outputFormatObj_vtable_set
    __swig_getmethods__["vtable"] = _mapscript.outputFormatObj_vtable_get
    if _newclass:vtable = _swig_property(_mapscript.outputFormatObj_vtable_get, _mapscript.outputFormatObj_vtable_set)
    def __init__(self, *args): 
        this = _mapscript.new_outputFormatObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_outputFormatObj
    __del__ = lambda self : None;
    def setExtension(*args): return _mapscript.outputFormatObj_setExtension(*args)
    def setMimetype(*args): return _mapscript.outputFormatObj_setMimetype(*args)
    def setOption(*args): return _mapscript.outputFormatObj_setOption(*args)
    def validate(*args): return _mapscript.outputFormatObj_validate(*args)
    def getOption(*args): return _mapscript.outputFormatObj_getOption(*args)
outputFormatObj_swigregister = _mapscript.outputFormatObj_swigregister
outputFormatObj_swigregister(outputFormatObj)

MS_NOOVERRIDE = _mapscript.MS_NOOVERRIDE
class queryMapObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, queryMapObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, queryMapObj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["height"] = _mapscript.queryMapObj_height_set
    __swig_getmethods__["height"] = _mapscript.queryMapObj_height_get
    if _newclass:height = _swig_property(_mapscript.queryMapObj_height_get, _mapscript.queryMapObj_height_set)
    __swig_setmethods__["width"] = _mapscript.queryMapObj_width_set
    __swig_getmethods__["width"] = _mapscript.queryMapObj_width_get
    if _newclass:width = _swig_property(_mapscript.queryMapObj_width_get, _mapscript.queryMapObj_width_set)
    __swig_setmethods__["status"] = _mapscript.queryMapObj_status_set
    __swig_getmethods__["status"] = _mapscript.queryMapObj_status_get
    if _newclass:status = _swig_property(_mapscript.queryMapObj_status_get, _mapscript.queryMapObj_status_set)
    __swig_setmethods__["style"] = _mapscript.queryMapObj_style_set
    __swig_getmethods__["style"] = _mapscript.queryMapObj_style_get
    if _newclass:style = _swig_property(_mapscript.queryMapObj_style_get, _mapscript.queryMapObj_style_set)
    __swig_setmethods__["color"] = _mapscript.queryMapObj_color_set
    __swig_getmethods__["color"] = _mapscript.queryMapObj_color_get
    if _newclass:color = _swig_property(_mapscript.queryMapObj_color_get, _mapscript.queryMapObj_color_set)
    def updateFromString(*args): return _mapscript.queryMapObj_updateFromString(*args)
    def __init__(self, *args): 
        this = _mapscript.new_queryMapObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_queryMapObj
    __del__ = lambda self : None;
queryMapObj_swigregister = _mapscript.queryMapObj_swigregister
queryMapObj_swigregister(queryMapObj)

MS_STYLE_BINDING_LENGTH = _mapscript.MS_STYLE_BINDING_LENGTH
MS_STYLE_BINDING_SIZE = _mapscript.MS_STYLE_BINDING_SIZE
MS_STYLE_BINDING_WIDTH = _mapscript.MS_STYLE_BINDING_WIDTH
MS_STYLE_BINDING_ANGLE = _mapscript.MS_STYLE_BINDING_ANGLE
MS_STYLE_BINDING_COLOR = _mapscript.MS_STYLE_BINDING_COLOR
MS_STYLE_BINDING_OUTLINECOLOR = _mapscript.MS_STYLE_BINDING_OUTLINECOLOR
MS_STYLE_BINDING_SYMBOL = _mapscript.MS_STYLE_BINDING_SYMBOL
MS_STYLE_BINDING_OUTLINEWIDTH = _mapscript.MS_STYLE_BINDING_OUTLINEWIDTH
MS_STYLE_BINDING_OPACITY = _mapscript.MS_STYLE_BINDING_OPACITY
MS_LABEL_BINDING_LENGTH = _mapscript.MS_LABEL_BINDING_LENGTH
MS_LABEL_BINDING_SIZE = _mapscript.MS_LABEL_BINDING_SIZE
MS_LABEL_BINDING_ANGLE = _mapscript.MS_LABEL_BINDING_ANGLE
MS_LABEL_BINDING_COLOR = _mapscript.MS_LABEL_BINDING_COLOR
MS_LABEL_BINDING_OUTLINECOLOR = _mapscript.MS_LABEL_BINDING_OUTLINECOLOR
MS_LABEL_BINDING_FONT = _mapscript.MS_LABEL_BINDING_FONT
MS_LABEL_BINDING_PRIORITY = _mapscript.MS_LABEL_BINDING_PRIORITY
class labelObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, labelObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, labelObj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["font"] = _mapscript.labelObj_font_set
    __swig_getmethods__["font"] = _mapscript.labelObj_font_get
    if _newclass:font = _swig_property(_mapscript.labelObj_font_get, _mapscript.labelObj_font_set)
    __swig_setmethods__["type"] = _mapscript.labelObj_type_set
    __swig_getmethods__["type"] = _mapscript.labelObj_type_get
    if _newclass:type = _swig_property(_mapscript.labelObj_type_get, _mapscript.labelObj_type_set)
    __swig_setmethods__["color"] = _mapscript.labelObj_color_set
    __swig_getmethods__["color"] = _mapscript.labelObj_color_get
    if _newclass:color = _swig_property(_mapscript.labelObj_color_get, _mapscript.labelObj_color_set)
    __swig_setmethods__["outlinecolor"] = _mapscript.labelObj_outlinecolor_set
    __swig_getmethods__["outlinecolor"] = _mapscript.labelObj_outlinecolor_get
    if _newclass:outlinecolor = _swig_property(_mapscript.labelObj_outlinecolor_get, _mapscript.labelObj_outlinecolor_set)
    __swig_setmethods__["outlinewidth"] = _mapscript.labelObj_outlinewidth_set
    __swig_getmethods__["outlinewidth"] = _mapscript.labelObj_outlinewidth_get
    if _newclass:outlinewidth = _swig_property(_mapscript.labelObj_outlinewidth_get, _mapscript.labelObj_outlinewidth_set)
    __swig_setmethods__["shadowcolor"] = _mapscript.labelObj_shadowcolor_set
    __swig_getmethods__["shadowcolor"] = _mapscript.labelObj_shadowcolor_get
    if _newclass:shadowcolor = _swig_property(_mapscript.labelObj_shadowcolor_get, _mapscript.labelObj_shadowcolor_set)
    __swig_setmethods__["shadowsizex"] = _mapscript.labelObj_shadowsizex_set
    __swig_getmethods__["shadowsizex"] = _mapscript.labelObj_shadowsizex_get
    if _newclass:shadowsizex = _swig_property(_mapscript.labelObj_shadowsizex_get, _mapscript.labelObj_shadowsizex_set)
    __swig_setmethods__["shadowsizey"] = _mapscript.labelObj_shadowsizey_set
    __swig_getmethods__["shadowsizey"] = _mapscript.labelObj_shadowsizey_get
    if _newclass:shadowsizey = _swig_property(_mapscript.labelObj_shadowsizey_get, _mapscript.labelObj_shadowsizey_set)
    __swig_setmethods__["backgroundcolor"] = _mapscript.labelObj_backgroundcolor_set
    __swig_getmethods__["backgroundcolor"] = _mapscript.labelObj_backgroundcolor_get
    if _newclass:backgroundcolor = _swig_property(_mapscript.labelObj_backgroundcolor_get, _mapscript.labelObj_backgroundcolor_set)
    __swig_setmethods__["backgroundshadowcolor"] = _mapscript.labelObj_backgroundshadowcolor_set
    __swig_getmethods__["backgroundshadowcolor"] = _mapscript.labelObj_backgroundshadowcolor_get
    if _newclass:backgroundshadowcolor = _swig_property(_mapscript.labelObj_backgroundshadowcolor_get, _mapscript.labelObj_backgroundshadowcolor_set)
    __swig_setmethods__["backgroundshadowsizex"] = _mapscript.labelObj_backgroundshadowsizex_set
    __swig_getmethods__["backgroundshadowsizex"] = _mapscript.labelObj_backgroundshadowsizex_get
    if _newclass:backgroundshadowsizex = _swig_property(_mapscript.labelObj_backgroundshadowsizex_get, _mapscript.labelObj_backgroundshadowsizex_set)
    __swig_setmethods__["backgroundshadowsizey"] = _mapscript.labelObj_backgroundshadowsizey_set
    __swig_getmethods__["backgroundshadowsizey"] = _mapscript.labelObj_backgroundshadowsizey_get
    if _newclass:backgroundshadowsizey = _swig_property(_mapscript.labelObj_backgroundshadowsizey_get, _mapscript.labelObj_backgroundshadowsizey_set)
    __swig_setmethods__["size"] = _mapscript.labelObj_size_set
    __swig_getmethods__["size"] = _mapscript.labelObj_size_get
    if _newclass:size = _swig_property(_mapscript.labelObj_size_get, _mapscript.labelObj_size_set)
    __swig_setmethods__["minsize"] = _mapscript.labelObj_minsize_set
    __swig_getmethods__["minsize"] = _mapscript.labelObj_minsize_get
    if _newclass:minsize = _swig_property(_mapscript.labelObj_minsize_get, _mapscript.labelObj_minsize_set)
    __swig_setmethods__["maxsize"] = _mapscript.labelObj_maxsize_set
    __swig_getmethods__["maxsize"] = _mapscript.labelObj_maxsize_get
    if _newclass:maxsize = _swig_property(_mapscript.labelObj_maxsize_get, _mapscript.labelObj_maxsize_set)
    __swig_setmethods__["position"] = _mapscript.labelObj_position_set
    __swig_getmethods__["position"] = _mapscript.labelObj_position_get
    if _newclass:position = _swig_property(_mapscript.labelObj_position_get, _mapscript.labelObj_position_set)
    __swig_setmethods__["offsetx"] = _mapscript.labelObj_offsetx_set
    __swig_getmethods__["offsetx"] = _mapscript.labelObj_offsetx_get
    if _newclass:offsetx = _swig_property(_mapscript.labelObj_offsetx_get, _mapscript.labelObj_offsetx_set)
    __swig_setmethods__["offsety"] = _mapscript.labelObj_offsety_set
    __swig_getmethods__["offsety"] = _mapscript.labelObj_offsety_get
    if _newclass:offsety = _swig_property(_mapscript.labelObj_offsety_get, _mapscript.labelObj_offsety_set)
    __swig_setmethods__["angle"] = _mapscript.labelObj_angle_set
    __swig_getmethods__["angle"] = _mapscript.labelObj_angle_get
    if _newclass:angle = _swig_property(_mapscript.labelObj_angle_get, _mapscript.labelObj_angle_set)
    __swig_setmethods__["autoangle"] = _mapscript.labelObj_autoangle_set
    __swig_getmethods__["autoangle"] = _mapscript.labelObj_autoangle_get
    if _newclass:autoangle = _swig_property(_mapscript.labelObj_autoangle_get, _mapscript.labelObj_autoangle_set)
    __swig_setmethods__["autofollow"] = _mapscript.labelObj_autofollow_set
    __swig_getmethods__["autofollow"] = _mapscript.labelObj_autofollow_get
    if _newclass:autofollow = _swig_property(_mapscript.labelObj_autofollow_get, _mapscript.labelObj_autofollow_set)
    __swig_setmethods__["buffer"] = _mapscript.labelObj_buffer_set
    __swig_getmethods__["buffer"] = _mapscript.labelObj_buffer_get
    if _newclass:buffer = _swig_property(_mapscript.labelObj_buffer_get, _mapscript.labelObj_buffer_set)
    __swig_setmethods__["antialias"] = _mapscript.labelObj_antialias_set
    __swig_getmethods__["antialias"] = _mapscript.labelObj_antialias_get
    if _newclass:antialias = _swig_property(_mapscript.labelObj_antialias_get, _mapscript.labelObj_antialias_set)
    __swig_setmethods__["align"] = _mapscript.labelObj_align_set
    __swig_getmethods__["align"] = _mapscript.labelObj_align_get
    if _newclass:align = _swig_property(_mapscript.labelObj_align_get, _mapscript.labelObj_align_set)
    __swig_setmethods__["wrap"] = _mapscript.labelObj_wrap_set
    __swig_getmethods__["wrap"] = _mapscript.labelObj_wrap_get
    if _newclass:wrap = _swig_property(_mapscript.labelObj_wrap_get, _mapscript.labelObj_wrap_set)
    __swig_setmethods__["maxlength"] = _mapscript.labelObj_maxlength_set
    __swig_getmethods__["maxlength"] = _mapscript.labelObj_maxlength_get
    if _newclass:maxlength = _swig_property(_mapscript.labelObj_maxlength_get, _mapscript.labelObj_maxlength_set)
    __swig_setmethods__["minlength"] = _mapscript.labelObj_minlength_set
    __swig_getmethods__["minlength"] = _mapscript.labelObj_minlength_get
    if _newclass:minlength = _swig_property(_mapscript.labelObj_minlength_get, _mapscript.labelObj_minlength_set)
    __swig_setmethods__["space_size_10"] = _mapscript.labelObj_space_size_10_set
    __swig_getmethods__["space_size_10"] = _mapscript.labelObj_space_size_10_get
    if _newclass:space_size_10 = _swig_property(_mapscript.labelObj_space_size_10_get, _mapscript.labelObj_space_size_10_set)
    __swig_setmethods__["minfeaturesize"] = _mapscript.labelObj_minfeaturesize_set
    __swig_getmethods__["minfeaturesize"] = _mapscript.labelObj_minfeaturesize_get
    if _newclass:minfeaturesize = _swig_property(_mapscript.labelObj_minfeaturesize_get, _mapscript.labelObj_minfeaturesize_set)
    __swig_setmethods__["autominfeaturesize"] = _mapscript.labelObj_autominfeaturesize_set
    __swig_getmethods__["autominfeaturesize"] = _mapscript.labelObj_autominfeaturesize_get
    if _newclass:autominfeaturesize = _swig_property(_mapscript.labelObj_autominfeaturesize_get, _mapscript.labelObj_autominfeaturesize_set)
    __swig_setmethods__["minscaledenom"] = _mapscript.labelObj_minscaledenom_set
    __swig_getmethods__["minscaledenom"] = _mapscript.labelObj_minscaledenom_get
    if _newclass:minscaledenom = _swig_property(_mapscript.labelObj_minscaledenom_get, _mapscript.labelObj_minscaledenom_set)
    __swig_setmethods__["maxscaledenom"] = _mapscript.labelObj_maxscaledenom_set
    __swig_getmethods__["maxscaledenom"] = _mapscript.labelObj_maxscaledenom_get
    if _newclass:maxscaledenom = _swig_property(_mapscript.labelObj_maxscaledenom_get, _mapscript.labelObj_maxscaledenom_set)
    __swig_setmethods__["mindistance"] = _mapscript.labelObj_mindistance_set
    __swig_getmethods__["mindistance"] = _mapscript.labelObj_mindistance_get
    if _newclass:mindistance = _swig_property(_mapscript.labelObj_mindistance_get, _mapscript.labelObj_mindistance_set)
    __swig_setmethods__["repeatdistance"] = _mapscript.labelObj_repeatdistance_set
    __swig_getmethods__["repeatdistance"] = _mapscript.labelObj_repeatdistance_get
    if _newclass:repeatdistance = _swig_property(_mapscript.labelObj_repeatdistance_get, _mapscript.labelObj_repeatdistance_set)
    __swig_setmethods__["partials"] = _mapscript.labelObj_partials_set
    __swig_getmethods__["partials"] = _mapscript.labelObj_partials_get
    if _newclass:partials = _swig_property(_mapscript.labelObj_partials_get, _mapscript.labelObj_partials_set)
    __swig_setmethods__["force"] = _mapscript.labelObj_force_set
    __swig_getmethods__["force"] = _mapscript.labelObj_force_get
    if _newclass:force = _swig_property(_mapscript.labelObj_force_get, _mapscript.labelObj_force_set)
    __swig_setmethods__["encoding"] = _mapscript.labelObj_encoding_set
    __swig_getmethods__["encoding"] = _mapscript.labelObj_encoding_get
    if _newclass:encoding = _swig_property(_mapscript.labelObj_encoding_get, _mapscript.labelObj_encoding_set)
    __swig_setmethods__["priority"] = _mapscript.labelObj_priority_set
    __swig_getmethods__["priority"] = _mapscript.labelObj_priority_get
    if _newclass:priority = _swig_property(_mapscript.labelObj_priority_get, _mapscript.labelObj_priority_set)
    def updateFromString(*args): return _mapscript.labelObj_updateFromString(*args)
    def removeBinding(*args): return _mapscript.labelObj_removeBinding(*args)
    def getBinding(*args): return _mapscript.labelObj_getBinding(*args)
    def setBinding(*args): return _mapscript.labelObj_setBinding(*args)
    def __init__(self, *args): 
        this = _mapscript.new_labelObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_labelObj
    __del__ = lambda self : None;
labelObj_swigregister = _mapscript.labelObj_swigregister
labelObj_swigregister(labelObj)

class webObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, webObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, webObj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["log"] = _mapscript.webObj_log_set
    __swig_getmethods__["log"] = _mapscript.webObj_log_get
    if _newclass:log = _swig_property(_mapscript.webObj_log_get, _mapscript.webObj_log_set)
    __swig_setmethods__["imagepath"] = _mapscript.webObj_imagepath_set
    __swig_getmethods__["imagepath"] = _mapscript.webObj_imagepath_get
    if _newclass:imagepath = _swig_property(_mapscript.webObj_imagepath_get, _mapscript.webObj_imagepath_set)
    __swig_setmethods__["imageurl"] = _mapscript.webObj_imageurl_set
    __swig_getmethods__["imageurl"] = _mapscript.webObj_imageurl_get
    if _newclass:imageurl = _swig_property(_mapscript.webObj_imageurl_get, _mapscript.webObj_imageurl_set)
    __swig_getmethods__["map"] = _mapscript.webObj_map_get
    if _newclass:map = _swig_property(_mapscript.webObj_map_get)
    __swig_setmethods__["template"] = _mapscript.webObj_template_set
    __swig_getmethods__["template"] = _mapscript.webObj_template_get
    if _newclass:template = _swig_property(_mapscript.webObj_template_get, _mapscript.webObj_template_set)
    __swig_setmethods__["header"] = _mapscript.webObj_header_set
    __swig_getmethods__["header"] = _mapscript.webObj_header_get
    if _newclass:header = _swig_property(_mapscript.webObj_header_get, _mapscript.webObj_header_set)
    __swig_setmethods__["footer"] = _mapscript.webObj_footer_set
    __swig_getmethods__["footer"] = _mapscript.webObj_footer_get
    if _newclass:footer = _swig_property(_mapscript.webObj_footer_get, _mapscript.webObj_footer_set)
    __swig_setmethods__["empty"] = _mapscript.webObj_empty_set
    __swig_getmethods__["empty"] = _mapscript.webObj_empty_get
    if _newclass:empty = _swig_property(_mapscript.webObj_empty_get, _mapscript.webObj_empty_set)
    __swig_setmethods__["error"] = _mapscript.webObj_error_set
    __swig_getmethods__["error"] = _mapscript.webObj_error_get
    if _newclass:error = _swig_property(_mapscript.webObj_error_get, _mapscript.webObj_error_set)
    __swig_setmethods__["extent"] = _mapscript.webObj_extent_set
    __swig_getmethods__["extent"] = _mapscript.webObj_extent_get
    if _newclass:extent = _swig_property(_mapscript.webObj_extent_get, _mapscript.webObj_extent_set)
    __swig_setmethods__["minscaledenom"] = _mapscript.webObj_minscaledenom_set
    __swig_getmethods__["minscaledenom"] = _mapscript.webObj_minscaledenom_get
    if _newclass:minscaledenom = _swig_property(_mapscript.webObj_minscaledenom_get, _mapscript.webObj_minscaledenom_set)
    __swig_setmethods__["maxscaledenom"] = _mapscript.webObj_maxscaledenom_set
    __swig_getmethods__["maxscaledenom"] = _mapscript.webObj_maxscaledenom_get
    if _newclass:maxscaledenom = _swig_property(_mapscript.webObj_maxscaledenom_get, _mapscript.webObj_maxscaledenom_set)
    __swig_setmethods__["mintemplate"] = _mapscript.webObj_mintemplate_set
    __swig_getmethods__["mintemplate"] = _mapscript.webObj_mintemplate_get
    if _newclass:mintemplate = _swig_property(_mapscript.webObj_mintemplate_get, _mapscript.webObj_mintemplate_set)
    __swig_setmethods__["maxtemplate"] = _mapscript.webObj_maxtemplate_set
    __swig_getmethods__["maxtemplate"] = _mapscript.webObj_maxtemplate_get
    if _newclass:maxtemplate = _swig_property(_mapscript.webObj_maxtemplate_get, _mapscript.webObj_maxtemplate_set)
    __swig_setmethods__["queryformat"] = _mapscript.webObj_queryformat_set
    __swig_getmethods__["queryformat"] = _mapscript.webObj_queryformat_get
    if _newclass:queryformat = _swig_property(_mapscript.webObj_queryformat_get, _mapscript.webObj_queryformat_set)
    __swig_setmethods__["legendformat"] = _mapscript.webObj_legendformat_set
    __swig_getmethods__["legendformat"] = _mapscript.webObj_legendformat_get
    if _newclass:legendformat = _swig_property(_mapscript.webObj_legendformat_get, _mapscript.webObj_legendformat_set)
    __swig_setmethods__["browseformat"] = _mapscript.webObj_browseformat_set
    __swig_getmethods__["browseformat"] = _mapscript.webObj_browseformat_get
    if _newclass:browseformat = _swig_property(_mapscript.webObj_browseformat_get, _mapscript.webObj_browseformat_set)
    __swig_getmethods__["metadata"] = _mapscript.webObj_metadata_get
    if _newclass:metadata = _swig_property(_mapscript.webObj_metadata_get)
    __swig_getmethods__["validation"] = _mapscript.webObj_validation_get
    if _newclass:validation = _swig_property(_mapscript.webObj_validation_get)
    def __init__(self, *args): 
        this = _mapscript.new_webObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_webObj
    __del__ = lambda self : None;
    def updateFromString(*args): return _mapscript.webObj_updateFromString(*args)
webObj_swigregister = _mapscript.webObj_swigregister
webObj_swigregister(webObj)

class styleObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, styleObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, styleObj, name)
    __repr__ = _swig_repr
    __swig_getmethods__["refcount"] = _mapscript.styleObj_refcount_get
    if _newclass:refcount = _swig_property(_mapscript.styleObj_refcount_get)
    __swig_setmethods__["autoangle"] = _mapscript.styleObj_autoangle_set
    __swig_getmethods__["autoangle"] = _mapscript.styleObj_autoangle_get
    if _newclass:autoangle = _swig_property(_mapscript.styleObj_autoangle_get, _mapscript.styleObj_autoangle_set)
    __swig_setmethods__["color"] = _mapscript.styleObj_color_set
    __swig_getmethods__["color"] = _mapscript.styleObj_color_get
    if _newclass:color = _swig_property(_mapscript.styleObj_color_get, _mapscript.styleObj_color_set)
    __swig_setmethods__["backgroundcolor"] = _mapscript.styleObj_backgroundcolor_set
    __swig_getmethods__["backgroundcolor"] = _mapscript.styleObj_backgroundcolor_get
    if _newclass:backgroundcolor = _swig_property(_mapscript.styleObj_backgroundcolor_get, _mapscript.styleObj_backgroundcolor_set)
    __swig_setmethods__["outlinecolor"] = _mapscript.styleObj_outlinecolor_set
    __swig_getmethods__["outlinecolor"] = _mapscript.styleObj_outlinecolor_get
    if _newclass:outlinecolor = _swig_property(_mapscript.styleObj_outlinecolor_get, _mapscript.styleObj_outlinecolor_set)
    __swig_setmethods__["opacity"] = _mapscript.styleObj_opacity_set
    __swig_getmethods__["opacity"] = _mapscript.styleObj_opacity_get
    if _newclass:opacity = _swig_property(_mapscript.styleObj_opacity_get, _mapscript.styleObj_opacity_set)
    __swig_setmethods__["mincolor"] = _mapscript.styleObj_mincolor_set
    __swig_getmethods__["mincolor"] = _mapscript.styleObj_mincolor_get
    if _newclass:mincolor = _swig_property(_mapscript.styleObj_mincolor_get, _mapscript.styleObj_mincolor_set)
    __swig_setmethods__["maxcolor"] = _mapscript.styleObj_maxcolor_set
    __swig_getmethods__["maxcolor"] = _mapscript.styleObj_maxcolor_get
    if _newclass:maxcolor = _swig_property(_mapscript.styleObj_maxcolor_get, _mapscript.styleObj_maxcolor_set)
    __swig_setmethods__["minvalue"] = _mapscript.styleObj_minvalue_set
    __swig_getmethods__["minvalue"] = _mapscript.styleObj_minvalue_get
    if _newclass:minvalue = _swig_property(_mapscript.styleObj_minvalue_get, _mapscript.styleObj_minvalue_set)
    __swig_setmethods__["maxvalue"] = _mapscript.styleObj_maxvalue_set
    __swig_getmethods__["maxvalue"] = _mapscript.styleObj_maxvalue_get
    if _newclass:maxvalue = _swig_property(_mapscript.styleObj_maxvalue_get, _mapscript.styleObj_maxvalue_set)
    __swig_setmethods__["rangeitem"] = _mapscript.styleObj_rangeitem_set
    __swig_getmethods__["rangeitem"] = _mapscript.styleObj_rangeitem_get
    if _newclass:rangeitem = _swig_property(_mapscript.styleObj_rangeitem_get, _mapscript.styleObj_rangeitem_set)
    __swig_setmethods__["rangeitemindex"] = _mapscript.styleObj_rangeitemindex_set
    __swig_getmethods__["rangeitemindex"] = _mapscript.styleObj_rangeitemindex_get
    if _newclass:rangeitemindex = _swig_property(_mapscript.styleObj_rangeitemindex_get, _mapscript.styleObj_rangeitemindex_set)
    __swig_setmethods__["symbol"] = _mapscript.styleObj_symbol_set
    __swig_getmethods__["symbol"] = _mapscript.styleObj_symbol_get
    if _newclass:symbol = _swig_property(_mapscript.styleObj_symbol_get, _mapscript.styleObj_symbol_set)
    __swig_setmethods__["symbolname"] = _mapscript.styleObj_symbolname_set
    __swig_getmethods__["symbolname"] = _mapscript.styleObj_symbolname_get
    if _newclass:symbolname = _swig_property(_mapscript.styleObj_symbolname_get, _mapscript.styleObj_symbolname_set)
    __swig_setmethods__["size"] = _mapscript.styleObj_size_set
    __swig_getmethods__["size"] = _mapscript.styleObj_size_get
    if _newclass:size = _swig_property(_mapscript.styleObj_size_get, _mapscript.styleObj_size_set)
    __swig_setmethods__["minsize"] = _mapscript.styleObj_minsize_set
    __swig_getmethods__["minsize"] = _mapscript.styleObj_minsize_get
    if _newclass:minsize = _swig_property(_mapscript.styleObj_minsize_get, _mapscript.styleObj_minsize_set)
    __swig_setmethods__["maxsize"] = _mapscript.styleObj_maxsize_set
    __swig_getmethods__["maxsize"] = _mapscript.styleObj_maxsize_get
    if _newclass:maxsize = _swig_property(_mapscript.styleObj_maxsize_get, _mapscript.styleObj_maxsize_set)
    __swig_setmethods__["patternlength"] = _mapscript.styleObj_patternlength_set
    __swig_getmethods__["patternlength"] = _mapscript.styleObj_patternlength_get
    if _newclass:patternlength = _swig_property(_mapscript.styleObj_patternlength_get, _mapscript.styleObj_patternlength_set)
    __swig_setmethods__["pattern"] = _mapscript.styleObj_pattern_set
    __swig_getmethods__["pattern"] = _mapscript.styleObj_pattern_get
    if _newclass:pattern = _swig_property(_mapscript.styleObj_pattern_get, _mapscript.styleObj_pattern_set)
    __swig_setmethods__["gap"] = _mapscript.styleObj_gap_set
    __swig_getmethods__["gap"] = _mapscript.styleObj_gap_get
    if _newclass:gap = _swig_property(_mapscript.styleObj_gap_get, _mapscript.styleObj_gap_set)
    __swig_setmethods__["position"] = _mapscript.styleObj_position_set
    __swig_getmethods__["position"] = _mapscript.styleObj_position_get
    if _newclass:position = _swig_property(_mapscript.styleObj_position_get, _mapscript.styleObj_position_set)
    __swig_setmethods__["linecap"] = _mapscript.styleObj_linecap_set
    __swig_getmethods__["linecap"] = _mapscript.styleObj_linecap_get
    if _newclass:linecap = _swig_property(_mapscript.styleObj_linecap_get, _mapscript.styleObj_linecap_set)
    __swig_setmethods__["linejoin"] = _mapscript.styleObj_linejoin_set
    __swig_getmethods__["linejoin"] = _mapscript.styleObj_linejoin_get
    if _newclass:linejoin = _swig_property(_mapscript.styleObj_linejoin_get, _mapscript.styleObj_linejoin_set)
    __swig_setmethods__["linejoinmaxsize"] = _mapscript.styleObj_linejoinmaxsize_set
    __swig_getmethods__["linejoinmaxsize"] = _mapscript.styleObj_linejoinmaxsize_get
    if _newclass:linejoinmaxsize = _swig_property(_mapscript.styleObj_linejoinmaxsize_get, _mapscript.styleObj_linejoinmaxsize_set)
    __swig_setmethods__["width"] = _mapscript.styleObj_width_set
    __swig_getmethods__["width"] = _mapscript.styleObj_width_get
    if _newclass:width = _swig_property(_mapscript.styleObj_width_get, _mapscript.styleObj_width_set)
    __swig_setmethods__["outlinewidth"] = _mapscript.styleObj_outlinewidth_set
    __swig_getmethods__["outlinewidth"] = _mapscript.styleObj_outlinewidth_get
    if _newclass:outlinewidth = _swig_property(_mapscript.styleObj_outlinewidth_get, _mapscript.styleObj_outlinewidth_set)
    __swig_setmethods__["minwidth"] = _mapscript.styleObj_minwidth_set
    __swig_getmethods__["minwidth"] = _mapscript.styleObj_minwidth_get
    if _newclass:minwidth = _swig_property(_mapscript.styleObj_minwidth_get, _mapscript.styleObj_minwidth_set)
    __swig_setmethods__["maxwidth"] = _mapscript.styleObj_maxwidth_set
    __swig_getmethods__["maxwidth"] = _mapscript.styleObj_maxwidth_get
    if _newclass:maxwidth = _swig_property(_mapscript.styleObj_maxwidth_get, _mapscript.styleObj_maxwidth_set)
    __swig_setmethods__["offsetx"] = _mapscript.styleObj_offsetx_set
    __swig_getmethods__["offsetx"] = _mapscript.styleObj_offsetx_get
    if _newclass:offsetx = _swig_property(_mapscript.styleObj_offsetx_get, _mapscript.styleObj_offsetx_set)
    __swig_setmethods__["offsety"] = _mapscript.styleObj_offsety_set
    __swig_getmethods__["offsety"] = _mapscript.styleObj_offsety_get
    if _newclass:offsety = _swig_property(_mapscript.styleObj_offsety_get, _mapscript.styleObj_offsety_set)
    __swig_setmethods__["angle"] = _mapscript.styleObj_angle_set
    __swig_getmethods__["angle"] = _mapscript.styleObj_angle_get
    if _newclass:angle = _swig_property(_mapscript.styleObj_angle_get, _mapscript.styleObj_angle_set)
    __swig_setmethods__["antialias"] = _mapscript.styleObj_antialias_set
    __swig_getmethods__["antialias"] = _mapscript.styleObj_antialias_get
    if _newclass:antialias = _swig_property(_mapscript.styleObj_antialias_get, _mapscript.styleObj_antialias_set)
    __swig_setmethods__["minscaledenom"] = _mapscript.styleObj_minscaledenom_set
    __swig_getmethods__["minscaledenom"] = _mapscript.styleObj_minscaledenom_get
    if _newclass:minscaledenom = _swig_property(_mapscript.styleObj_minscaledenom_get, _mapscript.styleObj_minscaledenom_set)
    __swig_setmethods__["maxscaledenom"] = _mapscript.styleObj_maxscaledenom_set
    __swig_getmethods__["maxscaledenom"] = _mapscript.styleObj_maxscaledenom_get
    if _newclass:maxscaledenom = _swig_property(_mapscript.styleObj_maxscaledenom_get, _mapscript.styleObj_maxscaledenom_set)
    def __init__(self, *args): 
        this = _mapscript.new_styleObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_styleObj
    __del__ = lambda self : None;
    def updateFromString(*args): return _mapscript.styleObj_updateFromString(*args)
    def clone(*args): return _mapscript.styleObj_clone(*args)
    def setSymbolByName(*args): return _mapscript.styleObj_setSymbolByName(*args)
    def removeBinding(*args): return _mapscript.styleObj_removeBinding(*args)
    def setBinding(*args): return _mapscript.styleObj_setBinding(*args)
    def getBinding(*args): return _mapscript.styleObj_getBinding(*args)
    def getGeomTransform(*args): return _mapscript.styleObj_getGeomTransform(*args)
    def setGeomTransform(*args): return _mapscript.styleObj_setGeomTransform(*args)
styleObj_swigregister = _mapscript.styleObj_swigregister
styleObj_swigregister(styleObj)

class classObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, classObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, classObj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["status"] = _mapscript.classObj_status_set
    __swig_getmethods__["status"] = _mapscript.classObj_status_get
    if _newclass:status = _swig_property(_mapscript.classObj_status_get, _mapscript.classObj_status_set)
    __swig_setmethods__["numstyles"] = _mapscript.classObj_numstyles_set
    __swig_getmethods__["numstyles"] = _mapscript.classObj_numstyles_get
    if _newclass:numstyles = _swig_property(_mapscript.classObj_numstyles_get, _mapscript.classObj_numstyles_set)
    __swig_getmethods__["label"] = _mapscript.classObj_label_get
    if _newclass:label = _swig_property(_mapscript.classObj_label_get)
    __swig_setmethods__["name"] = _mapscript.classObj_name_set
    __swig_getmethods__["name"] = _mapscript.classObj_name_get
    if _newclass:name = _swig_property(_mapscript.classObj_name_get, _mapscript.classObj_name_set)
    __swig_setmethods__["title"] = _mapscript.classObj_title_set
    __swig_getmethods__["title"] = _mapscript.classObj_title_get
    if _newclass:title = _swig_property(_mapscript.classObj_title_get, _mapscript.classObj_title_set)
    __swig_setmethods__["template"] = _mapscript.classObj_template_set
    __swig_getmethods__["template"] = _mapscript.classObj_template_get
    if _newclass:template = _swig_property(_mapscript.classObj_template_get, _mapscript.classObj_template_set)
    __swig_setmethods__["type"] = _mapscript.classObj_type_set
    __swig_getmethods__["type"] = _mapscript.classObj_type_get
    if _newclass:type = _swig_property(_mapscript.classObj_type_get, _mapscript.classObj_type_set)
    __swig_getmethods__["metadata"] = _mapscript.classObj_metadata_get
    if _newclass:metadata = _swig_property(_mapscript.classObj_metadata_get)
    __swig_getmethods__["validation"] = _mapscript.classObj_validation_get
    if _newclass:validation = _swig_property(_mapscript.classObj_validation_get)
    __swig_setmethods__["minscaledenom"] = _mapscript.classObj_minscaledenom_set
    __swig_getmethods__["minscaledenom"] = _mapscript.classObj_minscaledenom_get
    if _newclass:minscaledenom = _swig_property(_mapscript.classObj_minscaledenom_get, _mapscript.classObj_minscaledenom_set)
    __swig_setmethods__["maxscaledenom"] = _mapscript.classObj_maxscaledenom_set
    __swig_getmethods__["maxscaledenom"] = _mapscript.classObj_maxscaledenom_get
    if _newclass:maxscaledenom = _swig_property(_mapscript.classObj_maxscaledenom_get, _mapscript.classObj_maxscaledenom_set)
    __swig_getmethods__["refcount"] = _mapscript.classObj_refcount_get
    if _newclass:refcount = _swig_property(_mapscript.classObj_refcount_get)
    __swig_getmethods__["layer"] = _mapscript.classObj_layer_get
    if _newclass:layer = _swig_property(_mapscript.classObj_layer_get)
    __swig_setmethods__["debug"] = _mapscript.classObj_debug_set
    __swig_getmethods__["debug"] = _mapscript.classObj_debug_get
    if _newclass:debug = _swig_property(_mapscript.classObj_debug_get, _mapscript.classObj_debug_set)
    __swig_setmethods__["keyimage"] = _mapscript.classObj_keyimage_set
    __swig_getmethods__["keyimage"] = _mapscript.classObj_keyimage_get
    if _newclass:keyimage = _swig_property(_mapscript.classObj_keyimage_get, _mapscript.classObj_keyimage_set)
    __swig_setmethods__["group"] = _mapscript.classObj_group_set
    __swig_getmethods__["group"] = _mapscript.classObj_group_get
    if _newclass:group = _swig_property(_mapscript.classObj_group_get, _mapscript.classObj_group_set)
    def __init__(self, *args): 
        this = _mapscript.new_classObj(*args)
        try: self.this.append(this)
        except: self.this = this
        if 1:
	   if args and len(args)!=0:
		self.p_layer=args[0]
	   else:
		self.p_layer=None

    __swig_destroy__ = _mapscript.delete_classObj
    __del__ = lambda self : None;
    def updateFromString(*args): return _mapscript.classObj_updateFromString(*args)
    def clone(*args): return _mapscript.classObj_clone(*args)
    def setExpression(*args): return _mapscript.classObj_setExpression(*args)
    def getExpressionString(*args): return _mapscript.classObj_getExpressionString(*args)
    def setText(*args): return _mapscript.classObj_setText(*args)
    def getTextString(*args): return _mapscript.classObj_getTextString(*args)
    def getMetaData(*args): return _mapscript.classObj_getMetaData(*args)
    def setMetaData(*args): return _mapscript.classObj_setMetaData(*args)
    def getFirstMetaDataKey(*args): return _mapscript.classObj_getFirstMetaDataKey(*args)
    def getNextMetaDataKey(*args): return _mapscript.classObj_getNextMetaDataKey(*args)
    def drawLegendIcon(*args): return _mapscript.classObj_drawLegendIcon(*args)
    def createLegendIcon(*args): return _mapscript.classObj_createLegendIcon(*args)
    def getStyle(*args): return _mapscript.classObj_getStyle(*args)
    def insertStyle(*args): return _mapscript.classObj_insertStyle(*args)
    def removeStyle(*args): return _mapscript.classObj_removeStyle(*args)
    def moveStyleUp(*args): return _mapscript.classObj_moveStyleUp(*args)
    def moveStyleDown(*args): return _mapscript.classObj_moveStyleDown(*args)
classObj_swigregister = _mapscript.classObj_swigregister
classObj_swigregister(classObj)

class labelCacheMemberObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, labelCacheMemberObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, labelCacheMemberObj, name)
    __repr__ = _swig_repr
    __swig_getmethods__["text"] = _mapscript.labelCacheMemberObj_text_get
    if _newclass:text = _swig_property(_mapscript.labelCacheMemberObj_text_get)
    __swig_getmethods__["featuresize"] = _mapscript.labelCacheMemberObj_featuresize_get
    if _newclass:featuresize = _swig_property(_mapscript.labelCacheMemberObj_featuresize_get)
    __swig_getmethods__["styles"] = _mapscript.labelCacheMemberObj_styles_get
    if _newclass:styles = _swig_property(_mapscript.labelCacheMemberObj_styles_get)
    __swig_getmethods__["numstyles"] = _mapscript.labelCacheMemberObj_numstyles_get
    if _newclass:numstyles = _swig_property(_mapscript.labelCacheMemberObj_numstyles_get)
    __swig_getmethods__["label"] = _mapscript.labelCacheMemberObj_label_get
    if _newclass:label = _swig_property(_mapscript.labelCacheMemberObj_label_get)
    __swig_getmethods__["layerindex"] = _mapscript.labelCacheMemberObj_layerindex_get
    if _newclass:layerindex = _swig_property(_mapscript.labelCacheMemberObj_layerindex_get)
    __swig_getmethods__["classindex"] = _mapscript.labelCacheMemberObj_classindex_get
    if _newclass:classindex = _swig_property(_mapscript.labelCacheMemberObj_classindex_get)
    __swig_getmethods__["tileindex"] = _mapscript.labelCacheMemberObj_tileindex_get
    if _newclass:tileindex = _swig_property(_mapscript.labelCacheMemberObj_tileindex_get)
    __swig_getmethods__["shapeindex"] = _mapscript.labelCacheMemberObj_shapeindex_get
    if _newclass:shapeindex = _swig_property(_mapscript.labelCacheMemberObj_shapeindex_get)
    __swig_getmethods__["shapetype"] = _mapscript.labelCacheMemberObj_shapetype_get
    if _newclass:shapetype = _swig_property(_mapscript.labelCacheMemberObj_shapetype_get)
    __swig_getmethods__["point"] = _mapscript.labelCacheMemberObj_point_get
    if _newclass:point = _swig_property(_mapscript.labelCacheMemberObj_point_get)
    __swig_getmethods__["poly"] = _mapscript.labelCacheMemberObj_poly_get
    if _newclass:poly = _swig_property(_mapscript.labelCacheMemberObj_poly_get)
    __swig_getmethods__["status"] = _mapscript.labelCacheMemberObj_status_get
    if _newclass:status = _swig_property(_mapscript.labelCacheMemberObj_status_get)
    def __init__(self, *args): 
        this = _mapscript.new_labelCacheMemberObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_labelCacheMemberObj
    __del__ = lambda self : None;
labelCacheMemberObj_swigregister = _mapscript.labelCacheMemberObj_swigregister
labelCacheMemberObj_swigregister(labelCacheMemberObj)

class markerCacheMemberObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, markerCacheMemberObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, markerCacheMemberObj, name)
    __repr__ = _swig_repr
    __swig_getmethods__["id"] = _mapscript.markerCacheMemberObj_id_get
    if _newclass:id = _swig_property(_mapscript.markerCacheMemberObj_id_get)
    __swig_getmethods__["poly"] = _mapscript.markerCacheMemberObj_poly_get
    if _newclass:poly = _swig_property(_mapscript.markerCacheMemberObj_poly_get)
    def __init__(self, *args): 
        this = _mapscript.new_markerCacheMemberObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_markerCacheMemberObj
    __del__ = lambda self : None;
markerCacheMemberObj_swigregister = _mapscript.markerCacheMemberObj_swigregister
markerCacheMemberObj_swigregister(markerCacheMemberObj)

class labelCacheSlotObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, labelCacheSlotObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, labelCacheSlotObj, name)
    __repr__ = _swig_repr
    __swig_getmethods__["labels"] = _mapscript.labelCacheSlotObj_labels_get
    if _newclass:labels = _swig_property(_mapscript.labelCacheSlotObj_labels_get)
    __swig_getmethods__["numlabels"] = _mapscript.labelCacheSlotObj_numlabels_get
    if _newclass:numlabels = _swig_property(_mapscript.labelCacheSlotObj_numlabels_get)
    __swig_getmethods__["cachesize"] = _mapscript.labelCacheSlotObj_cachesize_get
    if _newclass:cachesize = _swig_property(_mapscript.labelCacheSlotObj_cachesize_get)
    __swig_getmethods__["markers"] = _mapscript.labelCacheSlotObj_markers_get
    if _newclass:markers = _swig_property(_mapscript.labelCacheSlotObj_markers_get)
    __swig_getmethods__["nummarkers"] = _mapscript.labelCacheSlotObj_nummarkers_get
    if _newclass:nummarkers = _swig_property(_mapscript.labelCacheSlotObj_nummarkers_get)
    __swig_getmethods__["markercachesize"] = _mapscript.labelCacheSlotObj_markercachesize_get
    if _newclass:markercachesize = _swig_property(_mapscript.labelCacheSlotObj_markercachesize_get)
    def __init__(self, *args): 
        this = _mapscript.new_labelCacheSlotObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_labelCacheSlotObj
    __del__ = lambda self : None;
labelCacheSlotObj_swigregister = _mapscript.labelCacheSlotObj_swigregister
labelCacheSlotObj_swigregister(labelCacheSlotObj)

class labelCacheObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, labelCacheObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, labelCacheObj, name)
    __repr__ = _swig_repr
    __swig_getmethods__["slots"] = _mapscript.labelCacheObj_slots_get
    if _newclass:slots = _swig_property(_mapscript.labelCacheObj_slots_get)
    __swig_getmethods__["numlabels"] = _mapscript.labelCacheObj_numlabels_get
    if _newclass:numlabels = _swig_property(_mapscript.labelCacheObj_numlabels_get)
    def freeCache(*args): return _mapscript.labelCacheObj_freeCache(*args)
    def __init__(self, *args): 
        this = _mapscript.new_labelCacheObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_labelCacheObj
    __del__ = lambda self : None;
labelCacheObj_swigregister = _mapscript.labelCacheObj_swigregister
labelCacheObj_swigregister(labelCacheObj)

class resultCacheMemberObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, resultCacheMemberObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, resultCacheMemberObj, name)
    __repr__ = _swig_repr
    __swig_getmethods__["shapeindex"] = _mapscript.resultCacheMemberObj_shapeindex_get
    if _newclass:shapeindex = _swig_property(_mapscript.resultCacheMemberObj_shapeindex_get)
    __swig_getmethods__["tileindex"] = _mapscript.resultCacheMemberObj_tileindex_get
    if _newclass:tileindex = _swig_property(_mapscript.resultCacheMemberObj_tileindex_get)
    __swig_getmethods__["classindex"] = _mapscript.resultCacheMemberObj_classindex_get
    if _newclass:classindex = _swig_property(_mapscript.resultCacheMemberObj_classindex_get)
    def __init__(self, *args): 
        this = _mapscript.new_resultCacheMemberObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_resultCacheMemberObj
    __del__ = lambda self : None;
resultCacheMemberObj_swigregister = _mapscript.resultCacheMemberObj_swigregister
resultCacheMemberObj_swigregister(resultCacheMemberObj)

class resultCacheObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, resultCacheObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, resultCacheObj, name)
    __repr__ = _swig_repr
    __swig_getmethods__["numresults"] = _mapscript.resultCacheObj_numresults_get
    if _newclass:numresults = _swig_property(_mapscript.resultCacheObj_numresults_get)
    __swig_getmethods__["bounds"] = _mapscript.resultCacheObj_bounds_get
    if _newclass:bounds = _swig_property(_mapscript.resultCacheObj_bounds_get)
    __swig_setmethods__["usegetshape"] = _mapscript.resultCacheObj_usegetshape_set
    __swig_getmethods__["usegetshape"] = _mapscript.resultCacheObj_usegetshape_get
    if _newclass:usegetshape = _swig_property(_mapscript.resultCacheObj_usegetshape_get, _mapscript.resultCacheObj_usegetshape_set)
    def getResult(*args): return _mapscript.resultCacheObj_getResult(*args)
    def __init__(self, *args): 
        this = _mapscript.new_resultCacheObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_resultCacheObj
    __del__ = lambda self : None;
resultCacheObj_swigregister = _mapscript.resultCacheObj_swigregister
resultCacheObj_swigregister(resultCacheObj)

class symbolSetObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symbolSetObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symbolSetObj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["filename"] = _mapscript.symbolSetObj_filename_set
    __swig_getmethods__["filename"] = _mapscript.symbolSetObj_filename_get
    if _newclass:filename = _swig_property(_mapscript.symbolSetObj_filename_get, _mapscript.symbolSetObj_filename_set)
    __swig_setmethods__["imagecachesize"] = _mapscript.symbolSetObj_imagecachesize_set
    __swig_getmethods__["imagecachesize"] = _mapscript.symbolSetObj_imagecachesize_get
    if _newclass:imagecachesize = _swig_property(_mapscript.symbolSetObj_imagecachesize_get, _mapscript.symbolSetObj_imagecachesize_set)
    __swig_getmethods__["numsymbols"] = _mapscript.symbolSetObj_numsymbols_get
    if _newclass:numsymbols = _swig_property(_mapscript.symbolSetObj_numsymbols_get)
    __swig_getmethods__["maxsymbols"] = _mapscript.symbolSetObj_maxsymbols_get
    if _newclass:maxsymbols = _swig_property(_mapscript.symbolSetObj_maxsymbols_get)
    def __init__(self, *args): 
        this = _mapscript.new_symbolSetObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_symbolSetObj
    __del__ = lambda self : None;
    def getSymbol(*args): return _mapscript.symbolSetObj_getSymbol(*args)
    def getSymbolByName(*args): return _mapscript.symbolSetObj_getSymbolByName(*args)
    def index(*args): return _mapscript.symbolSetObj_index(*args)
    def appendSymbol(*args): return _mapscript.symbolSetObj_appendSymbol(*args)
    def removeSymbol(*args): return _mapscript.symbolSetObj_removeSymbol(*args)
    def save(*args): return _mapscript.symbolSetObj_save(*args)
symbolSetObj_swigregister = _mapscript.symbolSetObj_swigregister
symbolSetObj_swigregister(symbolSetObj)

class referenceMapObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, referenceMapObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, referenceMapObj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["extent"] = _mapscript.referenceMapObj_extent_set
    __swig_getmethods__["extent"] = _mapscript.referenceMapObj_extent_get
    if _newclass:extent = _swig_property(_mapscript.referenceMapObj_extent_get, _mapscript.referenceMapObj_extent_set)
    __swig_setmethods__["height"] = _mapscript.referenceMapObj_height_set
    __swig_getmethods__["height"] = _mapscript.referenceMapObj_height_get
    if _newclass:height = _swig_property(_mapscript.referenceMapObj_height_get, _mapscript.referenceMapObj_height_set)
    __swig_setmethods__["width"] = _mapscript.referenceMapObj_width_set
    __swig_getmethods__["width"] = _mapscript.referenceMapObj_width_get
    if _newclass:width = _swig_property(_mapscript.referenceMapObj_width_get, _mapscript.referenceMapObj_width_set)
    __swig_setmethods__["color"] = _mapscript.referenceMapObj_color_set
    __swig_getmethods__["color"] = _mapscript.referenceMapObj_color_get
    if _newclass:color = _swig_property(_mapscript.referenceMapObj_color_get, _mapscript.referenceMapObj_color_set)
    __swig_setmethods__["outlinecolor"] = _mapscript.referenceMapObj_outlinecolor_set
    __swig_getmethods__["outlinecolor"] = _mapscript.referenceMapObj_outlinecolor_get
    if _newclass:outlinecolor = _swig_property(_mapscript.referenceMapObj_outlinecolor_get, _mapscript.referenceMapObj_outlinecolor_set)
    __swig_setmethods__["image"] = _mapscript.referenceMapObj_image_set
    __swig_getmethods__["image"] = _mapscript.referenceMapObj_image_get
    if _newclass:image = _swig_property(_mapscript.referenceMapObj_image_get, _mapscript.referenceMapObj_image_set)
    __swig_setmethods__["status"] = _mapscript.referenceMapObj_status_set
    __swig_getmethods__["status"] = _mapscript.referenceMapObj_status_get
    if _newclass:status = _swig_property(_mapscript.referenceMapObj_status_get, _mapscript.referenceMapObj_status_set)
    __swig_setmethods__["marker"] = _mapscript.referenceMapObj_marker_set
    __swig_getmethods__["marker"] = _mapscript.referenceMapObj_marker_get
    if _newclass:marker = _swig_property(_mapscript.referenceMapObj_marker_get, _mapscript.referenceMapObj_marker_set)
    __swig_setmethods__["markername"] = _mapscript.referenceMapObj_markername_set
    __swig_getmethods__["markername"] = _mapscript.referenceMapObj_markername_get
    if _newclass:markername = _swig_property(_mapscript.referenceMapObj_markername_get, _mapscript.referenceMapObj_markername_set)
    __swig_setmethods__["markersize"] = _mapscript.referenceMapObj_markersize_set
    __swig_getmethods__["markersize"] = _mapscript.referenceMapObj_markersize_get
    if _newclass:markersize = _swig_property(_mapscript.referenceMapObj_markersize_get, _mapscript.referenceMapObj_markersize_set)
    __swig_setmethods__["minboxsize"] = _mapscript.referenceMapObj_minboxsize_set
    __swig_getmethods__["minboxsize"] = _mapscript.referenceMapObj_minboxsize_get
    if _newclass:minboxsize = _swig_property(_mapscript.referenceMapObj_minboxsize_get, _mapscript.referenceMapObj_minboxsize_set)
    __swig_setmethods__["maxboxsize"] = _mapscript.referenceMapObj_maxboxsize_set
    __swig_getmethods__["maxboxsize"] = _mapscript.referenceMapObj_maxboxsize_get
    if _newclass:maxboxsize = _swig_property(_mapscript.referenceMapObj_maxboxsize_get, _mapscript.referenceMapObj_maxboxsize_set)
    __swig_getmethods__["map"] = _mapscript.referenceMapObj_map_get
    if _newclass:map = _swig_property(_mapscript.referenceMapObj_map_get)
    def updateFromString(*args): return _mapscript.referenceMapObj_updateFromString(*args)
    def __init__(self, *args): 
        this = _mapscript.new_referenceMapObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_referenceMapObj
    __del__ = lambda self : None;
referenceMapObj_swigregister = _mapscript.referenceMapObj_swigregister
referenceMapObj_swigregister(referenceMapObj)

class scalebarObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scalebarObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scalebarObj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["imagecolor"] = _mapscript.scalebarObj_imagecolor_set
    __swig_getmethods__["imagecolor"] = _mapscript.scalebarObj_imagecolor_get
    if _newclass:imagecolor = _swig_property(_mapscript.scalebarObj_imagecolor_get, _mapscript.scalebarObj_imagecolor_set)
    __swig_setmethods__["height"] = _mapscript.scalebarObj_height_set
    __swig_getmethods__["height"] = _mapscript.scalebarObj_height_get
    if _newclass:height = _swig_property(_mapscript.scalebarObj_height_get, _mapscript.scalebarObj_height_set)
    __swig_setmethods__["width"] = _mapscript.scalebarObj_width_set
    __swig_getmethods__["width"] = _mapscript.scalebarObj_width_get
    if _newclass:width = _swig_property(_mapscript.scalebarObj_width_get, _mapscript.scalebarObj_width_set)
    __swig_setmethods__["style"] = _mapscript.scalebarObj_style_set
    __swig_getmethods__["style"] = _mapscript.scalebarObj_style_get
    if _newclass:style = _swig_property(_mapscript.scalebarObj_style_get, _mapscript.scalebarObj_style_set)
    __swig_setmethods__["intervals"] = _mapscript.scalebarObj_intervals_set
    __swig_getmethods__["intervals"] = _mapscript.scalebarObj_intervals_get
    if _newclass:intervals = _swig_property(_mapscript.scalebarObj_intervals_get, _mapscript.scalebarObj_intervals_set)
    __swig_setmethods__["label"] = _mapscript.scalebarObj_label_set
    __swig_getmethods__["label"] = _mapscript.scalebarObj_label_get
    if _newclass:label = _swig_property(_mapscript.scalebarObj_label_get, _mapscript.scalebarObj_label_set)
    __swig_setmethods__["color"] = _mapscript.scalebarObj_color_set
    __swig_getmethods__["color"] = _mapscript.scalebarObj_color_get
    if _newclass:color = _swig_property(_mapscript.scalebarObj_color_get, _mapscript.scalebarObj_color_set)
    __swig_setmethods__["backgroundcolor"] = _mapscript.scalebarObj_backgroundcolor_set
    __swig_getmethods__["backgroundcolor"] = _mapscript.scalebarObj_backgroundcolor_get
    if _newclass:backgroundcolor = _swig_property(_mapscript.scalebarObj_backgroundcolor_get, _mapscript.scalebarObj_backgroundcolor_set)
    __swig_setmethods__["outlinecolor"] = _mapscript.scalebarObj_outlinecolor_set
    __swig_getmethods__["outlinecolor"] = _mapscript.scalebarObj_outlinecolor_get
    if _newclass:outlinecolor = _swig_property(_mapscript.scalebarObj_outlinecolor_get, _mapscript.scalebarObj_outlinecolor_set)
    __swig_setmethods__["units"] = _mapscript.scalebarObj_units_set
    __swig_getmethods__["units"] = _mapscript.scalebarObj_units_get
    if _newclass:units = _swig_property(_mapscript.scalebarObj_units_get, _mapscript.scalebarObj_units_set)
    __swig_setmethods__["status"] = _mapscript.scalebarObj_status_set
    __swig_getmethods__["status"] = _mapscript.scalebarObj_status_get
    if _newclass:status = _swig_property(_mapscript.scalebarObj_status_get, _mapscript.scalebarObj_status_set)
    __swig_setmethods__["position"] = _mapscript.scalebarObj_position_set
    __swig_getmethods__["position"] = _mapscript.scalebarObj_position_get
    if _newclass:position = _swig_property(_mapscript.scalebarObj_position_get, _mapscript.scalebarObj_position_set)
    __swig_setmethods__["postlabelcache"] = _mapscript.scalebarObj_postlabelcache_set
    __swig_getmethods__["postlabelcache"] = _mapscript.scalebarObj_postlabelcache_get
    if _newclass:postlabelcache = _swig_property(_mapscript.scalebarObj_postlabelcache_get, _mapscript.scalebarObj_postlabelcache_set)
    __swig_setmethods__["align"] = _mapscript.scalebarObj_align_set
    __swig_getmethods__["align"] = _mapscript.scalebarObj_align_get
    if _newclass:align = _swig_property(_mapscript.scalebarObj_align_get, _mapscript.scalebarObj_align_set)
    def updateFromString(*args): return _mapscript.scalebarObj_updateFromString(*args)
    def __init__(self, *args): 
        this = _mapscript.new_scalebarObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_scalebarObj
    __del__ = lambda self : None;
scalebarObj_swigregister = _mapscript.scalebarObj_swigregister
scalebarObj_swigregister(scalebarObj)

class legendObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, legendObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, legendObj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["imagecolor"] = _mapscript.legendObj_imagecolor_set
    __swig_getmethods__["imagecolor"] = _mapscript.legendObj_imagecolor_get
    if _newclass:imagecolor = _swig_property(_mapscript.legendObj_imagecolor_get, _mapscript.legendObj_imagecolor_set)
    __swig_getmethods__["label"] = _mapscript.legendObj_label_get
    if _newclass:label = _swig_property(_mapscript.legendObj_label_get)
    __swig_setmethods__["keysizex"] = _mapscript.legendObj_keysizex_set
    __swig_getmethods__["keysizex"] = _mapscript.legendObj_keysizex_get
    if _newclass:keysizex = _swig_property(_mapscript.legendObj_keysizex_get, _mapscript.legendObj_keysizex_set)
    __swig_setmethods__["keysizey"] = _mapscript.legendObj_keysizey_set
    __swig_getmethods__["keysizey"] = _mapscript.legendObj_keysizey_get
    if _newclass:keysizey = _swig_property(_mapscript.legendObj_keysizey_get, _mapscript.legendObj_keysizey_set)
    __swig_setmethods__["keyspacingx"] = _mapscript.legendObj_keyspacingx_set
    __swig_getmethods__["keyspacingx"] = _mapscript.legendObj_keyspacingx_get
    if _newclass:keyspacingx = _swig_property(_mapscript.legendObj_keyspacingx_get, _mapscript.legendObj_keyspacingx_set)
    __swig_setmethods__["keyspacingy"] = _mapscript.legendObj_keyspacingy_set
    __swig_getmethods__["keyspacingy"] = _mapscript.legendObj_keyspacingy_get
    if _newclass:keyspacingy = _swig_property(_mapscript.legendObj_keyspacingy_get, _mapscript.legendObj_keyspacingy_set)
    __swig_setmethods__["outlinecolor"] = _mapscript.legendObj_outlinecolor_set
    __swig_getmethods__["outlinecolor"] = _mapscript.legendObj_outlinecolor_get
    if _newclass:outlinecolor = _swig_property(_mapscript.legendObj_outlinecolor_get, _mapscript.legendObj_outlinecolor_set)
    __swig_setmethods__["status"] = _mapscript.legendObj_status_set
    __swig_getmethods__["status"] = _mapscript.legendObj_status_get
    if _newclass:status = _swig_property(_mapscript.legendObj_status_get, _mapscript.legendObj_status_set)
    __swig_setmethods__["height"] = _mapscript.legendObj_height_set
    __swig_getmethods__["height"] = _mapscript.legendObj_height_get
    if _newclass:height = _swig_property(_mapscript.legendObj_height_get, _mapscript.legendObj_height_set)
    __swig_setmethods__["width"] = _mapscript.legendObj_width_set
    __swig_getmethods__["width"] = _mapscript.legendObj_width_get
    if _newclass:width = _swig_property(_mapscript.legendObj_width_get, _mapscript.legendObj_width_set)
    __swig_setmethods__["position"] = _mapscript.legendObj_position_set
    __swig_getmethods__["position"] = _mapscript.legendObj_position_get
    if _newclass:position = _swig_property(_mapscript.legendObj_position_get, _mapscript.legendObj_position_set)
    __swig_setmethods__["postlabelcache"] = _mapscript.legendObj_postlabelcache_set
    __swig_getmethods__["postlabelcache"] = _mapscript.legendObj_postlabelcache_get
    if _newclass:postlabelcache = _swig_property(_mapscript.legendObj_postlabelcache_get, _mapscript.legendObj_postlabelcache_set)
    __swig_setmethods__["template"] = _mapscript.legendObj_template_set
    __swig_getmethods__["template"] = _mapscript.legendObj_template_get
    if _newclass:template = _swig_property(_mapscript.legendObj_template_get, _mapscript.legendObj_template_set)
    __swig_getmethods__["map"] = _mapscript.legendObj_map_get
    if _newclass:map = _swig_property(_mapscript.legendObj_map_get)
    def updateFromString(*args): return _mapscript.legendObj_updateFromString(*args)
    def __init__(self, *args): 
        this = _mapscript.new_legendObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_legendObj
    __del__ = lambda self : None;
legendObj_swigregister = _mapscript.legendObj_swigregister
legendObj_swigregister(legendObj)

class layerObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, layerObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, layerObj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["classitem"] = _mapscript.layerObj_classitem_set
    __swig_getmethods__["classitem"] = _mapscript.layerObj_classitem_get
    if _newclass:classitem = _swig_property(_mapscript.layerObj_classitem_get, _mapscript.layerObj_classitem_set)
    __swig_getmethods__["refcount"] = _mapscript.layerObj_refcount_get
    if _newclass:refcount = _swig_property(_mapscript.layerObj_refcount_get)
    __swig_getmethods__["numclasses"] = _mapscript.layerObj_numclasses_get
    if _newclass:numclasses = _swig_property(_mapscript.layerObj_numclasses_get)
    __swig_getmethods__["maxclasses"] = _mapscript.layerObj_maxclasses_get
    if _newclass:maxclasses = _swig_property(_mapscript.layerObj_maxclasses_get)
    __swig_getmethods__["index"] = _mapscript.layerObj_index_get
    if _newclass:index = _swig_property(_mapscript.layerObj_index_get)
    __swig_getmethods__["map"] = _mapscript.layerObj_map_get
    if _newclass:map = _swig_property(_mapscript.layerObj_map_get)
    __swig_setmethods__["header"] = _mapscript.layerObj_header_set
    __swig_getmethods__["header"] = _mapscript.layerObj_header_get
    if _newclass:header = _swig_property(_mapscript.layerObj_header_get, _mapscript.layerObj_header_set)
    __swig_setmethods__["footer"] = _mapscript.layerObj_footer_set
    __swig_getmethods__["footer"] = _mapscript.layerObj_footer_get
    if _newclass:footer = _swig_property(_mapscript.layerObj_footer_get, _mapscript.layerObj_footer_set)
    __swig_setmethods__["template"] = _mapscript.layerObj_template_set
    __swig_getmethods__["template"] = _mapscript.layerObj_template_get
    if _newclass:template = _swig_property(_mapscript.layerObj_template_get, _mapscript.layerObj_template_set)
    __swig_setmethods__["name"] = _mapscript.layerObj_name_set
    __swig_getmethods__["name"] = _mapscript.layerObj_name_get
    if _newclass:name = _swig_property(_mapscript.layerObj_name_get, _mapscript.layerObj_name_set)
    __swig_setmethods__["group"] = _mapscript.layerObj_group_set
    __swig_getmethods__["group"] = _mapscript.layerObj_group_get
    if _newclass:group = _swig_property(_mapscript.layerObj_group_get, _mapscript.layerObj_group_set)
    __swig_setmethods__["status"] = _mapscript.layerObj_status_set
    __swig_getmethods__["status"] = _mapscript.layerObj_status_get
    if _newclass:status = _swig_property(_mapscript.layerObj_status_get, _mapscript.layerObj_status_set)
    __swig_setmethods__["data"] = _mapscript.layerObj_data_set
    __swig_getmethods__["data"] = _mapscript.layerObj_data_get
    if _newclass:data = _swig_property(_mapscript.layerObj_data_get, _mapscript.layerObj_data_set)
    __swig_setmethods__["type"] = _mapscript.layerObj_type_set
    __swig_getmethods__["type"] = _mapscript.layerObj_type_get
    if _newclass:type = _swig_property(_mapscript.layerObj_type_get, _mapscript.layerObj_type_set)
    __swig_setmethods__["tolerance"] = _mapscript.layerObj_tolerance_set
    __swig_getmethods__["tolerance"] = _mapscript.layerObj_tolerance_get
    if _newclass:tolerance = _swig_property(_mapscript.layerObj_tolerance_get, _mapscript.layerObj_tolerance_set)
    __swig_setmethods__["toleranceunits"] = _mapscript.layerObj_toleranceunits_set
    __swig_getmethods__["toleranceunits"] = _mapscript.layerObj_toleranceunits_get
    if _newclass:toleranceunits = _swig_property(_mapscript.layerObj_toleranceunits_get, _mapscript.layerObj_toleranceunits_set)
    __swig_setmethods__["symbolscaledenom"] = _mapscript.layerObj_symbolscaledenom_set
    __swig_getmethods__["symbolscaledenom"] = _mapscript.layerObj_symbolscaledenom_get
    if _newclass:symbolscaledenom = _swig_property(_mapscript.layerObj_symbolscaledenom_get, _mapscript.layerObj_symbolscaledenom_set)
    __swig_setmethods__["minscaledenom"] = _mapscript.layerObj_minscaledenom_set
    __swig_getmethods__["minscaledenom"] = _mapscript.layerObj_minscaledenom_get
    if _newclass:minscaledenom = _swig_property(_mapscript.layerObj_minscaledenom_get, _mapscript.layerObj_minscaledenom_set)
    __swig_setmethods__["maxscaledenom"] = _mapscript.layerObj_maxscaledenom_set
    __swig_getmethods__["maxscaledenom"] = _mapscript.layerObj_maxscaledenom_get
    if _newclass:maxscaledenom = _swig_property(_mapscript.layerObj_maxscaledenom_get, _mapscript.layerObj_maxscaledenom_set)
    __swig_setmethods__["labelminscaledenom"] = _mapscript.layerObj_labelminscaledenom_set
    __swig_getmethods__["labelminscaledenom"] = _mapscript.layerObj_labelminscaledenom_get
    if _newclass:labelminscaledenom = _swig_property(_mapscript.layerObj_labelminscaledenom_get, _mapscript.layerObj_labelminscaledenom_set)
    __swig_setmethods__["labelmaxscaledenom"] = _mapscript.layerObj_labelmaxscaledenom_set
    __swig_getmethods__["labelmaxscaledenom"] = _mapscript.layerObj_labelmaxscaledenom_get
    if _newclass:labelmaxscaledenom = _swig_property(_mapscript.layerObj_labelmaxscaledenom_get, _mapscript.layerObj_labelmaxscaledenom_set)
    __swig_setmethods__["mingeowidth"] = _mapscript.layerObj_mingeowidth_set
    __swig_getmethods__["mingeowidth"] = _mapscript.layerObj_mingeowidth_get
    if _newclass:mingeowidth = _swig_property(_mapscript.layerObj_mingeowidth_get, _mapscript.layerObj_mingeowidth_set)
    __swig_setmethods__["maxgeowidth"] = _mapscript.layerObj_maxgeowidth_set
    __swig_getmethods__["maxgeowidth"] = _mapscript.layerObj_maxgeowidth_get
    if _newclass:maxgeowidth = _swig_property(_mapscript.layerObj_maxgeowidth_get, _mapscript.layerObj_maxgeowidth_set)
    __swig_setmethods__["sizeunits"] = _mapscript.layerObj_sizeunits_set
    __swig_getmethods__["sizeunits"] = _mapscript.layerObj_sizeunits_get
    if _newclass:sizeunits = _swig_property(_mapscript.layerObj_sizeunits_get, _mapscript.layerObj_sizeunits_set)
    __swig_setmethods__["maxfeatures"] = _mapscript.layerObj_maxfeatures_set
    __swig_getmethods__["maxfeatures"] = _mapscript.layerObj_maxfeatures_get
    if _newclass:maxfeatures = _swig_property(_mapscript.layerObj_maxfeatures_get, _mapscript.layerObj_maxfeatures_set)
    __swig_setmethods__["offsite"] = _mapscript.layerObj_offsite_set
    __swig_getmethods__["offsite"] = _mapscript.layerObj_offsite_get
    if _newclass:offsite = _swig_property(_mapscript.layerObj_offsite_get, _mapscript.layerObj_offsite_set)
    __swig_setmethods__["transform"] = _mapscript.layerObj_transform_set
    __swig_getmethods__["transform"] = _mapscript.layerObj_transform_get
    if _newclass:transform = _swig_property(_mapscript.layerObj_transform_get, _mapscript.layerObj_transform_set)
    __swig_setmethods__["labelcache"] = _mapscript.layerObj_labelcache_set
    __swig_getmethods__["labelcache"] = _mapscript.layerObj_labelcache_get
    if _newclass:labelcache = _swig_property(_mapscript.layerObj_labelcache_get, _mapscript.layerObj_labelcache_set)
    __swig_setmethods__["postlabelcache"] = _mapscript.layerObj_postlabelcache_set
    __swig_getmethods__["postlabelcache"] = _mapscript.layerObj_postlabelcache_get
    if _newclass:postlabelcache = _swig_property(_mapscript.layerObj_postlabelcache_get, _mapscript.layerObj_postlabelcache_set)
    __swig_setmethods__["labelitem"] = _mapscript.layerObj_labelitem_set
    __swig_getmethods__["labelitem"] = _mapscript.layerObj_labelitem_get
    if _newclass:labelitem = _swig_property(_mapscript.layerObj_labelitem_get, _mapscript.layerObj_labelitem_set)
    __swig_setmethods__["tileitem"] = _mapscript.layerObj_tileitem_set
    __swig_getmethods__["tileitem"] = _mapscript.layerObj_tileitem_get
    if _newclass:tileitem = _swig_property(_mapscript.layerObj_tileitem_get, _mapscript.layerObj_tileitem_set)
    __swig_setmethods__["tileindex"] = _mapscript.layerObj_tileindex_set
    __swig_getmethods__["tileindex"] = _mapscript.layerObj_tileindex_get
    if _newclass:tileindex = _swig_property(_mapscript.layerObj_tileindex_get, _mapscript.layerObj_tileindex_set)
    __swig_setmethods__["units"] = _mapscript.layerObj_units_set
    __swig_getmethods__["units"] = _mapscript.layerObj_units_get
    if _newclass:units = _swig_property(_mapscript.layerObj_units_get, _mapscript.layerObj_units_set)
    __swig_setmethods__["connection"] = _mapscript.layerObj_connection_set
    __swig_getmethods__["connection"] = _mapscript.layerObj_connection_get
    if _newclass:connection = _swig_property(_mapscript.layerObj_connection_get, _mapscript.layerObj_connection_set)
    __swig_setmethods__["plugin_library"] = _mapscript.layerObj_plugin_library_set
    __swig_getmethods__["plugin_library"] = _mapscript.layerObj_plugin_library_get
    if _newclass:plugin_library = _swig_property(_mapscript.layerObj_plugin_library_get, _mapscript.layerObj_plugin_library_set)
    __swig_setmethods__["plugin_library_original"] = _mapscript.layerObj_plugin_library_original_set
    __swig_getmethods__["plugin_library_original"] = _mapscript.layerObj_plugin_library_original_get
    if _newclass:plugin_library_original = _swig_property(_mapscript.layerObj_plugin_library_original_get, _mapscript.layerObj_plugin_library_original_set)
    __swig_setmethods__["connectiontype"] = _mapscript.layerObj_connectiontype_set
    __swig_getmethods__["connectiontype"] = _mapscript.layerObj_connectiontype_get
    if _newclass:connectiontype = _swig_property(_mapscript.layerObj_connectiontype_get, _mapscript.layerObj_connectiontype_set)
    __swig_getmethods__["numitems"] = _mapscript.layerObj_numitems_get
    if _newclass:numitems = _swig_property(_mapscript.layerObj_numitems_get)
    __swig_setmethods__["bandsitem"] = _mapscript.layerObj_bandsitem_set
    __swig_getmethods__["bandsitem"] = _mapscript.layerObj_bandsitem_get
    if _newclass:bandsitem = _swig_property(_mapscript.layerObj_bandsitem_get, _mapscript.layerObj_bandsitem_set)
    __swig_setmethods__["filteritem"] = _mapscript.layerObj_filteritem_set
    __swig_getmethods__["filteritem"] = _mapscript.layerObj_filteritem_get
    if _newclass:filteritem = _swig_property(_mapscript.layerObj_filteritem_get, _mapscript.layerObj_filteritem_set)
    __swig_setmethods__["styleitem"] = _mapscript.layerObj_styleitem_set
    __swig_getmethods__["styleitem"] = _mapscript.layerObj_styleitem_get
    if _newclass:styleitem = _swig_property(_mapscript.layerObj_styleitem_get, _mapscript.layerObj_styleitem_set)
    __swig_setmethods__["requires"] = _mapscript.layerObj_requires_set
    __swig_getmethods__["requires"] = _mapscript.layerObj_requires_get
    if _newclass:requires = _swig_property(_mapscript.layerObj_requires_get, _mapscript.layerObj_requires_set)
    __swig_setmethods__["labelrequires"] = _mapscript.layerObj_labelrequires_set
    __swig_getmethods__["labelrequires"] = _mapscript.layerObj_labelrequires_get
    if _newclass:labelrequires = _swig_property(_mapscript.layerObj_labelrequires_get, _mapscript.layerObj_labelrequires_set)
    __swig_getmethods__["metadata"] = _mapscript.layerObj_metadata_get
    if _newclass:metadata = _swig_property(_mapscript.layerObj_metadata_get)
    __swig_getmethods__["validation"] = _mapscript.layerObj_validation_get
    if _newclass:validation = _swig_property(_mapscript.layerObj_validation_get)
    __swig_setmethods__["opacity"] = _mapscript.layerObj_opacity_set
    __swig_getmethods__["opacity"] = _mapscript.layerObj_opacity_get
    if _newclass:opacity = _swig_property(_mapscript.layerObj_opacity_get, _mapscript.layerObj_opacity_set)
    __swig_setmethods__["dump"] = _mapscript.layerObj_dump_set
    __swig_getmethods__["dump"] = _mapscript.layerObj_dump_get
    if _newclass:dump = _swig_property(_mapscript.layerObj_dump_get, _mapscript.layerObj_dump_set)
    __swig_setmethods__["debug"] = _mapscript.layerObj_debug_set
    __swig_getmethods__["debug"] = _mapscript.layerObj_debug_get
    if _newclass:debug = _swig_property(_mapscript.layerObj_debug_get, _mapscript.layerObj_debug_set)
    __swig_getmethods__["extent"] = _mapscript.layerObj_extent_get
    if _newclass:extent = _swig_property(_mapscript.layerObj_extent_get)
    __swig_getmethods__["numprocessing"] = _mapscript.layerObj_numprocessing_get
    if _newclass:numprocessing = _swig_property(_mapscript.layerObj_numprocessing_get)
    __swig_getmethods__["numjoins"] = _mapscript.layerObj_numjoins_get
    if _newclass:numjoins = _swig_property(_mapscript.layerObj_numjoins_get)
    __swig_setmethods__["classgroup"] = _mapscript.layerObj_classgroup_set
    __swig_getmethods__["classgroup"] = _mapscript.layerObj_classgroup_get
    if _newclass:classgroup = _swig_property(_mapscript.layerObj_classgroup_get, _mapscript.layerObj_classgroup_set)
    def __init__(self, *args): 
        this = _mapscript.new_layerObj(*args)
        try: self.this.append(this)
        except: self.this = this
        if 1:
	  if args and len(args)!=0:
		self.p_map=args[0]
	  else:
		self.p_map=None

    __swig_destroy__ = _mapscript.delete_layerObj
    __del__ = lambda self : None;
    def clone(*args): return _mapscript.layerObj_clone(*args)
    def updateFromString(*args): return _mapscript.layerObj_updateFromString(*args)
    def insertClass(*args):
           actualIndex=_mapscript.layerObj_insertClass(*args)
           args[1].p_layer=args[0]
           return actualIndex

    def removeClass(*args): return _mapscript.layerObj_removeClass(*args)
    def open(*args): return _mapscript.layerObj_open(*args)
    def whichShapes(*args): return _mapscript.layerObj_whichShapes(*args)
    def nextShape(*args): return _mapscript.layerObj_nextShape(*args)
    def close(*args): return _mapscript.layerObj_close(*args)
    def getFeature(*args): return _mapscript.layerObj_getFeature(*args)
    def getShape(*args): return _mapscript.layerObj_getShape(*args)
    def resultsGetShape(*args): return _mapscript.layerObj_resultsGetShape(*args)
    def getNumResults(*args): return _mapscript.layerObj_getNumResults(*args)
    def getResult(*args): return _mapscript.layerObj_getResult(*args)
    def getClass(*args):
    	clazz = _mapscript.layerObj_getClass(*args)
    	if clazz:
    		if args and len(args)!=0:
    			clazz.p_layer=args[0]
    		else:
    			clazz.p_layer=None
    	return clazz

    def getItem(*args): return _mapscript.layerObj_getItem(*args)
    def draw(*args): return _mapscript.layerObj_draw(*args)
    def drawQuery(*args): return _mapscript.layerObj_drawQuery(*args)
    def queryByAttributes(*args): return _mapscript.layerObj_queryByAttributes(*args)
    def queryByPoint(*args): return _mapscript.layerObj_queryByPoint(*args)
    def queryByRect(*args): return _mapscript.layerObj_queryByRect(*args)
    def queryByFeatures(*args): return _mapscript.layerObj_queryByFeatures(*args)
    def queryByShape(*args): return _mapscript.layerObj_queryByShape(*args)
    def queryByIndex(*args): return _mapscript.layerObj_queryByIndex(*args)
    def getResults(*args): return _mapscript.layerObj_getResults(*args)
    def setFilter(*args): return _mapscript.layerObj_setFilter(*args)
    def getFilterString(*args): return _mapscript.layerObj_getFilterString(*args)
    def setWKTProjection(*args): return _mapscript.layerObj_setWKTProjection(*args)
    def getProjection(*args): return _mapscript.layerObj_getProjection(*args)
    def setProjection(*args): return _mapscript.layerObj_setProjection(*args)
    def addFeature(*args): return _mapscript.layerObj_addFeature(*args)
    def getNumFeatures(*args): return _mapscript.layerObj_getNumFeatures(*args)
    def getExtent(*args): return _mapscript.layerObj_getExtent(*args)
    def setExtent(*args): return _mapscript.layerObj_setExtent(*args)
    def getMetaData(*args): return _mapscript.layerObj_getMetaData(*args)
    def setMetaData(*args): return _mapscript.layerObj_setMetaData(*args)
    def removeMetaData(*args): return _mapscript.layerObj_removeMetaData(*args)
    def getFirstMetaDataKey(*args): return _mapscript.layerObj_getFirstMetaDataKey(*args)
    def getNextMetaDataKey(*args): return _mapscript.layerObj_getNextMetaDataKey(*args)
    def getWMSFeatureInfoURL(*args): return _mapscript.layerObj_getWMSFeatureInfoURL(*args)
    def executeWFSGetFeature(*args): return _mapscript.layerObj_executeWFSGetFeature(*args)
    def applySLD(*args): return _mapscript.layerObj_applySLD(*args)
    def applySLDURL(*args): return _mapscript.layerObj_applySLDURL(*args)
    def generateSLD(*args): return _mapscript.layerObj_generateSLD(*args)
    def isVisible(*args): return _mapscript.layerObj_isVisible(*args)
    def moveClassUp(*args): return _mapscript.layerObj_moveClassUp(*args)
    def moveClassDown(*args): return _mapscript.layerObj_moveClassDown(*args)
    def setProcessingKey(*args): return _mapscript.layerObj_setProcessingKey(*args)
    def setProcessing(*args): return _mapscript.layerObj_setProcessing(*args)
    def addProcessing(*args): return _mapscript.layerObj_addProcessing(*args)
    def getProcessing(*args): return _mapscript.layerObj_getProcessing(*args)
    def getProcessingKey(*args): return _mapscript.layerObj_getProcessingKey(*args)
    def clearProcessing(*args): return _mapscript.layerObj_clearProcessing(*args)
    def setConnectionType(*args): return _mapscript.layerObj_setConnectionType(*args)
layerObj_swigregister = _mapscript.layerObj_swigregister
layerObj_swigregister(layerObj)

class mapObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapObj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _mapscript.mapObj_name_set
    __swig_getmethods__["name"] = _mapscript.mapObj_name_get
    if _newclass:name = _swig_property(_mapscript.mapObj_name_get, _mapscript.mapObj_name_set)
    __swig_setmethods__["status"] = _mapscript.mapObj_status_set
    __swig_getmethods__["status"] = _mapscript.mapObj_status_get
    if _newclass:status = _swig_property(_mapscript.mapObj_status_get, _mapscript.mapObj_status_set)
    __swig_setmethods__["height"] = _mapscript.mapObj_height_set
    __swig_getmethods__["height"] = _mapscript.mapObj_height_get
    if _newclass:height = _swig_property(_mapscript.mapObj_height_get, _mapscript.mapObj_height_set)
    __swig_setmethods__["width"] = _mapscript.mapObj_width_set
    __swig_getmethods__["width"] = _mapscript.mapObj_width_get
    if _newclass:width = _swig_property(_mapscript.mapObj_width_get, _mapscript.mapObj_width_set)
    __swig_setmethods__["maxsize"] = _mapscript.mapObj_maxsize_set
    __swig_getmethods__["maxsize"] = _mapscript.mapObj_maxsize_get
    if _newclass:maxsize = _swig_property(_mapscript.mapObj_maxsize_get, _mapscript.mapObj_maxsize_set)
    __swig_getmethods__["refcount"] = _mapscript.mapObj_refcount_get
    if _newclass:refcount = _swig_property(_mapscript.mapObj_refcount_get)
    __swig_getmethods__["numlayers"] = _mapscript.mapObj_numlayers_get
    if _newclass:numlayers = _swig_property(_mapscript.mapObj_numlayers_get)
    __swig_getmethods__["maxlayers"] = _mapscript.mapObj_maxlayers_get
    if _newclass:maxlayers = _swig_property(_mapscript.mapObj_maxlayers_get)
    __swig_getmethods__["symbolset"] = _mapscript.mapObj_symbolset_get
    if _newclass:symbolset = _swig_property(_mapscript.mapObj_symbolset_get)
    __swig_getmethods__["fontset"] = _mapscript.mapObj_fontset_get
    if _newclass:fontset = _swig_property(_mapscript.mapObj_fontset_get)
    __swig_getmethods__["labelcache"] = _mapscript.mapObj_labelcache_get
    if _newclass:labelcache = _swig_property(_mapscript.mapObj_labelcache_get)
    __swig_setmethods__["transparent"] = _mapscript.mapObj_transparent_set
    __swig_getmethods__["transparent"] = _mapscript.mapObj_transparent_get
    if _newclass:transparent = _swig_property(_mapscript.mapObj_transparent_get, _mapscript.mapObj_transparent_set)
    __swig_setmethods__["interlace"] = _mapscript.mapObj_interlace_set
    __swig_getmethods__["interlace"] = _mapscript.mapObj_interlace_get
    if _newclass:interlace = _swig_property(_mapscript.mapObj_interlace_get, _mapscript.mapObj_interlace_set)
    __swig_setmethods__["imagequality"] = _mapscript.mapObj_imagequality_set
    __swig_getmethods__["imagequality"] = _mapscript.mapObj_imagequality_get
    if _newclass:imagequality = _swig_property(_mapscript.mapObj_imagequality_get, _mapscript.mapObj_imagequality_set)
    __swig_setmethods__["extent"] = _mapscript.mapObj_extent_set
    __swig_getmethods__["extent"] = _mapscript.mapObj_extent_get
    if _newclass:extent = _swig_property(_mapscript.mapObj_extent_get, _mapscript.mapObj_extent_set)
    __swig_setmethods__["cellsize"] = _mapscript.mapObj_cellsize_set
    __swig_getmethods__["cellsize"] = _mapscript.mapObj_cellsize_get
    if _newclass:cellsize = _swig_property(_mapscript.mapObj_cellsize_get, _mapscript.mapObj_cellsize_set)
    __swig_setmethods__["units"] = _mapscript.mapObj_units_set
    __swig_getmethods__["units"] = _mapscript.mapObj_units_get
    if _newclass:units = _swig_property(_mapscript.mapObj_units_get, _mapscript.mapObj_units_set)
    __swig_setmethods__["scaledenom"] = _mapscript.mapObj_scaledenom_set
    __swig_getmethods__["scaledenom"] = _mapscript.mapObj_scaledenom_get
    if _newclass:scaledenom = _swig_property(_mapscript.mapObj_scaledenom_get, _mapscript.mapObj_scaledenom_set)
    __swig_setmethods__["resolution"] = _mapscript.mapObj_resolution_set
    __swig_getmethods__["resolution"] = _mapscript.mapObj_resolution_get
    if _newclass:resolution = _swig_property(_mapscript.mapObj_resolution_get, _mapscript.mapObj_resolution_set)
    __swig_setmethods__["defresolution"] = _mapscript.mapObj_defresolution_set
    __swig_getmethods__["defresolution"] = _mapscript.mapObj_defresolution_get
    if _newclass:defresolution = _swig_property(_mapscript.mapObj_defresolution_get, _mapscript.mapObj_defresolution_set)
    __swig_setmethods__["shapepath"] = _mapscript.mapObj_shapepath_set
    __swig_getmethods__["shapepath"] = _mapscript.mapObj_shapepath_get
    if _newclass:shapepath = _swig_property(_mapscript.mapObj_shapepath_get, _mapscript.mapObj_shapepath_set)
    __swig_setmethods__["mappath"] = _mapscript.mapObj_mappath_set
    __swig_getmethods__["mappath"] = _mapscript.mapObj_mappath_get
    if _newclass:mappath = _swig_property(_mapscript.mapObj_mappath_get, _mapscript.mapObj_mappath_set)
    __swig_setmethods__["imagecolor"] = _mapscript.mapObj_imagecolor_set
    __swig_getmethods__["imagecolor"] = _mapscript.mapObj_imagecolor_get
    if _newclass:imagecolor = _swig_property(_mapscript.mapObj_imagecolor_get, _mapscript.mapObj_imagecolor_set)
    __swig_getmethods__["numoutputformats"] = _mapscript.mapObj_numoutputformats_get
    if _newclass:numoutputformats = _swig_property(_mapscript.mapObj_numoutputformats_get)
    __swig_getmethods__["outputformatlist"] = _mapscript.mapObj_outputformatlist_get
    if _newclass:outputformatlist = _swig_property(_mapscript.mapObj_outputformatlist_get)
    __swig_getmethods__["outputformat"] = _mapscript.mapObj_outputformat_get
    if _newclass:outputformat = _swig_property(_mapscript.mapObj_outputformat_get)
    __swig_getmethods__["imagetype"] = _mapscript.mapObj_imagetype_get
    if _newclass:imagetype = _swig_property(_mapscript.mapObj_imagetype_get)
    __swig_getmethods__["reference"] = _mapscript.mapObj_reference_get
    if _newclass:reference = _swig_property(_mapscript.mapObj_reference_get)
    __swig_getmethods__["scalebar"] = _mapscript.mapObj_scalebar_get
    if _newclass:scalebar = _swig_property(_mapscript.mapObj_scalebar_get)
    __swig_getmethods__["legend"] = _mapscript.mapObj_legend_get
    if _newclass:legend = _swig_property(_mapscript.mapObj_legend_get)
    __swig_getmethods__["querymap"] = _mapscript.mapObj_querymap_get
    if _newclass:querymap = _swig_property(_mapscript.mapObj_querymap_get)
    __swig_getmethods__["web"] = _mapscript.mapObj_web_get
    if _newclass:web = _swig_property(_mapscript.mapObj_web_get)
    __swig_setmethods__["layerorder"] = _mapscript.mapObj_layerorder_set
    __swig_getmethods__["layerorder"] = _mapscript.mapObj_layerorder_get
    if _newclass:layerorder = _swig_property(_mapscript.mapObj_layerorder_get, _mapscript.mapObj_layerorder_set)
    __swig_setmethods__["debug"] = _mapscript.mapObj_debug_set
    __swig_getmethods__["debug"] = _mapscript.mapObj_debug_get
    if _newclass:debug = _swig_property(_mapscript.mapObj_debug_get, _mapscript.mapObj_debug_set)
    __swig_setmethods__["datapattern"] = _mapscript.mapObj_datapattern_set
    __swig_getmethods__["datapattern"] = _mapscript.mapObj_datapattern_get
    if _newclass:datapattern = _swig_property(_mapscript.mapObj_datapattern_get, _mapscript.mapObj_datapattern_set)
    __swig_setmethods__["templatepattern"] = _mapscript.mapObj_templatepattern_set
    __swig_getmethods__["templatepattern"] = _mapscript.mapObj_templatepattern_get
    if _newclass:templatepattern = _swig_property(_mapscript.mapObj_templatepattern_get, _mapscript.mapObj_templatepattern_set)
    __swig_getmethods__["configoptions"] = _mapscript.mapObj_configoptions_get
    if _newclass:configoptions = _swig_property(_mapscript.mapObj_configoptions_get)
    def __init__(self, *args): 
        this = _mapscript.new_mapObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_mapObj
    __del__ = lambda self : None;
    def clone(*args): return _mapscript.mapObj_clone(*args)
    def insertLayer(*args):
           actualIndex=_mapscript.mapObj_insertLayer(*args)
           args[1].p_map=args[0]
           return actualIndex

    def removeLayer(*args): return _mapscript.mapObj_removeLayer(*args)
    def setExtent(*args): return _mapscript.mapObj_setExtent(*args)
    def offsetExtent(*args): return _mapscript.mapObj_offsetExtent(*args)
    def scaleExtent(*args): return _mapscript.mapObj_scaleExtent(*args)
    def setCenter(*args): return _mapscript.mapObj_setCenter(*args)
    def setSize(*args): return _mapscript.mapObj_setSize(*args)
    def setRotation(*args): return _mapscript.mapObj_setRotation(*args)
    def getLayer(*args):
    	layer = _mapscript.mapObj_getLayer(*args)
    	if layer:
    		if args and len(args)!=0:
    			layer.p_map=args[0]
    		else:
    			layer.p_map=None
    	return layer

    def getLayerByName(*args):
    	layer = _mapscript.mapObj_getLayerByName(*args)
    	if layer:
    		if args and len(args)!=0:
    			layer.p_map=args[0]
    		else:
    			layer.p_map=None
    	return layer

    def getSymbolByName(*args): return _mapscript.mapObj_getSymbolByName(*args)
    def prepareQuery(*args): return _mapscript.mapObj_prepareQuery(*args)
    def prepareImage(*args): return _mapscript.mapObj_prepareImage(*args)
    def setImageType(*args): return _mapscript.mapObj_setImageType(*args)
    def selectOutputFormat(*args): return _mapscript.mapObj_selectOutputFormat(*args)
    def setOutputFormat(*args): return _mapscript.mapObj_setOutputFormat(*args)
    def draw(*args): return _mapscript.mapObj_draw(*args)
    def drawQuery(*args): return _mapscript.mapObj_drawQuery(*args)
    def drawLegend(*args): return _mapscript.mapObj_drawLegend(*args)
    def drawScalebar(*args): return _mapscript.mapObj_drawScalebar(*args)
    def drawReferenceMap(*args): return _mapscript.mapObj_drawReferenceMap(*args)
    def embedScalebar(*args): return _mapscript.mapObj_embedScalebar(*args)
    def embedLegend(*args): return _mapscript.mapObj_embedLegend(*args)
    def drawLabelCache(*args): return _mapscript.mapObj_drawLabelCache(*args)
    def getLabel(*args): return _mapscript.mapObj_getLabel(*args)
    def nextLabel(*args): return _mapscript.mapObj_nextLabel(*args)
    def queryByPoint(*args): return _mapscript.mapObj_queryByPoint(*args)
    def queryByRect(*args): return _mapscript.mapObj_queryByRect(*args)
    def queryByFeatures(*args): return _mapscript.mapObj_queryByFeatures(*args)
    def queryByShape(*args): return _mapscript.mapObj_queryByShape(*args)
    def setWKTProjection(*args): return _mapscript.mapObj_setWKTProjection(*args)
    def getProjection(*args): return _mapscript.mapObj_getProjection(*args)
    def setProjection(*args): return _mapscript.mapObj_setProjection(*args)
    def save(*args): return _mapscript.mapObj_save(*args)
    def saveQuery(*args): return _mapscript.mapObj_saveQuery(*args)
    def loadQuery(*args): return _mapscript.mapObj_loadQuery(*args)
    def freeQuery(*args): return _mapscript.mapObj_freeQuery(*args)
    def saveQueryAsGML(*args): return _mapscript.mapObj_saveQueryAsGML(*args)
    def getMetaData(*args): return _mapscript.mapObj_getMetaData(*args)
    def setMetaData(*args): return _mapscript.mapObj_setMetaData(*args)
    def removeMetaData(*args): return _mapscript.mapObj_removeMetaData(*args)
    def getFirstMetaDataKey(*args): return _mapscript.mapObj_getFirstMetaDataKey(*args)
    def getNextMetaDataKey(*args): return _mapscript.mapObj_getNextMetaDataKey(*args)
    def setSymbolSet(*args): return _mapscript.mapObj_setSymbolSet(*args)
    def getNumSymbols(*args): return _mapscript.mapObj_getNumSymbols(*args)
    def setFontSet(*args): return _mapscript.mapObj_setFontSet(*args)
    def saveMapContext(*args): return _mapscript.mapObj_saveMapContext(*args)
    def loadMapContext(*args): return _mapscript.mapObj_loadMapContext(*args)
    def moveLayerUp(*args): return _mapscript.mapObj_moveLayerUp(*args)
    def moveLayerDown(*args): return _mapscript.mapObj_moveLayerDown(*args)
    def getLayersDrawingOrder(*args): return _mapscript.mapObj_getLayersDrawingOrder(*args)
    def setLayersDrawingOrder(*args): return _mapscript.mapObj_setLayersDrawingOrder(*args)
    def setConfigOption(*args): return _mapscript.mapObj_setConfigOption(*args)
    def getConfigOption(*args): return _mapscript.mapObj_getConfigOption(*args)
    def applyConfigOptions(*args): return _mapscript.mapObj_applyConfigOptions(*args)
    def applySLD(*args): return _mapscript.mapObj_applySLD(*args)
    def applySLDURL(*args): return _mapscript.mapObj_applySLDURL(*args)
    def generateSLD(*args): return _mapscript.mapObj_generateSLD(*args)
    def processTemplate(*args): return _mapscript.mapObj_processTemplate(*args)
    def processLegendTemplate(*args): return _mapscript.mapObj_processLegendTemplate(*args)
    def processQueryTemplate(*args): return _mapscript.mapObj_processQueryTemplate(*args)
    def getOutputFormatByName(*args): return _mapscript.mapObj_getOutputFormatByName(*args)
    def appendOutputFormat(*args): return _mapscript.mapObj_appendOutputFormat(*args)
    def removeOutputFormat(*args): return _mapscript.mapObj_removeOutputFormat(*args)
    def loadOWSParameters(*args): return _mapscript.mapObj_loadOWSParameters(*args)
    def OWSDispatch(*args): return _mapscript.mapObj_OWSDispatch(*args)
    def zoomPoint(*args): return _mapscript.mapObj_zoomPoint(*args)
    def zoomRectangle(*args): return _mapscript.mapObj_zoomRectangle(*args)
    def zoomScale(*args): return _mapscript.mapObj_zoomScale(*args)
    def getLayerOrder(*args): return _mapscript.mapObj_getLayerOrder(*args)
    def setLayerOrder(*args): return _mapscript.mapObj_setLayerOrder(*args)
    def getSize(*args): return _mapscript.mapObj_getSize(*args)
    def get_height(self):
        return self.getSize()[1] # <-- second member is the height
    def get_width(self):
        return self.getSize()[0] # <-- first member is the width
    def set_height(self, value):
        return self.setSize(self.getSize()[0], value)
    def set_width(self, value):
        return self.setSize(value, self.getSize()[1])
    width = property(get_width, set_width)
    height = property(get_height, set_height)


mapObj_swigregister = _mapscript.mapObj_swigregister
mapObj_swigregister(mapObj)

class imageObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imageObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imageObj, name)
    __repr__ = _swig_repr
    __swig_getmethods__["width"] = _mapscript.imageObj_width_get
    if _newclass:width = _swig_property(_mapscript.imageObj_width_get)
    __swig_getmethods__["height"] = _mapscript.imageObj_height_get
    if _newclass:height = _swig_property(_mapscript.imageObj_height_get)
    __swig_getmethods__["resolution"] = _mapscript.imageObj_resolution_get
    if _newclass:resolution = _swig_property(_mapscript.imageObj_resolution_get)
    __swig_getmethods__["resolutionfactor"] = _mapscript.imageObj_resolutionfactor_get
    if _newclass:resolutionfactor = _swig_property(_mapscript.imageObj_resolutionfactor_get)
    __swig_getmethods__["imagepath"] = _mapscript.imageObj_imagepath_get
    if _newclass:imagepath = _swig_property(_mapscript.imageObj_imagepath_get)
    __swig_getmethods__["imageurl"] = _mapscript.imageObj_imageurl_get
    if _newclass:imageurl = _swig_property(_mapscript.imageObj_imageurl_get)
    __swig_getmethods__["format"] = _mapscript.imageObj_format_get
    if _newclass:format = _swig_property(_mapscript.imageObj_format_get)
    __swig_getmethods__["buffer_format"] = _mapscript.imageObj_buffer_format_get
    if _newclass:buffer_format = _swig_property(_mapscript.imageObj_buffer_format_get)
    __swig_setmethods__["renderer"] = _mapscript.imageObj_renderer_set
    __swig_getmethods__["renderer"] = _mapscript.imageObj_renderer_get
    if _newclass:renderer = _swig_property(_mapscript.imageObj_renderer_get, _mapscript.imageObj_renderer_set)
    __swig_destroy__ = _mapscript.delete_imageObj
    __del__ = lambda self : None;
    def save(*args): return _mapscript.imageObj_save(*args)
    def getBytes(*args): return _mapscript.imageObj_getBytes(*args)
    def getSize(*args): return _mapscript.imageObj_getSize(*args)
    def __init__(self, *args): 
        this = _mapscript.new_imageObj(*args)
        try: self.this.append(this)
        except: self.this = this
    def write(*args): return _mapscript.imageObj_write(*args)
    def saveToString(*args): return _mapscript.imageObj_saveToString(*args)
imageObj_swigregister = _mapscript.imageObj_swigregister
imageObj_swigregister(imageObj)

msSaveImage = _mapscript.msSaveImage
msFreeImage = _mapscript.msFreeImage
msSetup = _mapscript.msSetup
msCleanup = _mapscript.msCleanup
msLoadMapFromString = _mapscript.msLoadMapFromString
class strokeStyleObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, strokeStyleObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, strokeStyleObj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["width"] = _mapscript.strokeStyleObj_width_set
    __swig_getmethods__["width"] = _mapscript.strokeStyleObj_width_get
    if _newclass:width = _swig_property(_mapscript.strokeStyleObj_width_get, _mapscript.strokeStyleObj_width_set)
    __swig_setmethods__["patternlength"] = _mapscript.strokeStyleObj_patternlength_set
    __swig_getmethods__["patternlength"] = _mapscript.strokeStyleObj_patternlength_get
    if _newclass:patternlength = _swig_property(_mapscript.strokeStyleObj_patternlength_get, _mapscript.strokeStyleObj_patternlength_set)
    __swig_setmethods__["pattern"] = _mapscript.strokeStyleObj_pattern_set
    __swig_getmethods__["pattern"] = _mapscript.strokeStyleObj_pattern_get
    if _newclass:pattern = _swig_property(_mapscript.strokeStyleObj_pattern_get, _mapscript.strokeStyleObj_pattern_set)
    __swig_setmethods__["color"] = _mapscript.strokeStyleObj_color_set
    __swig_getmethods__["color"] = _mapscript.strokeStyleObj_color_get
    if _newclass:color = _swig_property(_mapscript.strokeStyleObj_color_get, _mapscript.strokeStyleObj_color_set)
    __swig_setmethods__["linecap"] = _mapscript.strokeStyleObj_linecap_set
    __swig_getmethods__["linecap"] = _mapscript.strokeStyleObj_linecap_get
    if _newclass:linecap = _swig_property(_mapscript.strokeStyleObj_linecap_get, _mapscript.strokeStyleObj_linecap_set)
    __swig_setmethods__["linejoin"] = _mapscript.strokeStyleObj_linejoin_set
    __swig_getmethods__["linejoin"] = _mapscript.strokeStyleObj_linejoin_get
    if _newclass:linejoin = _swig_property(_mapscript.strokeStyleObj_linejoin_get, _mapscript.strokeStyleObj_linejoin_set)
    __swig_setmethods__["linejoinmaxsize"] = _mapscript.strokeStyleObj_linejoinmaxsize_set
    __swig_getmethods__["linejoinmaxsize"] = _mapscript.strokeStyleObj_linejoinmaxsize_get
    if _newclass:linejoinmaxsize = _swig_property(_mapscript.strokeStyleObj_linejoinmaxsize_get, _mapscript.strokeStyleObj_linejoinmaxsize_set)
    def __init__(self, *args): 
        this = _mapscript.new_strokeStyleObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_strokeStyleObj
    __del__ = lambda self : None;
strokeStyleObj_swigregister = _mapscript.strokeStyleObj_swigregister
strokeStyleObj_swigregister(strokeStyleObj)

class fillStyleObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fillStyleObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fillStyleObj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["color"] = _mapscript.fillStyleObj_color_set
    __swig_getmethods__["color"] = _mapscript.fillStyleObj_color_get
    if _newclass:color = _swig_property(_mapscript.fillStyleObj_color_get, _mapscript.fillStyleObj_color_set)
    __swig_setmethods__["tile"] = _mapscript.fillStyleObj_tile_set
    __swig_getmethods__["tile"] = _mapscript.fillStyleObj_tile_get
    if _newclass:tile = _swig_property(_mapscript.fillStyleObj_tile_get, _mapscript.fillStyleObj_tile_set)
    def __init__(self, *args): 
        this = _mapscript.new_fillStyleObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_fillStyleObj
    __del__ = lambda self : None;
fillStyleObj_swigregister = _mapscript.fillStyleObj_swigregister
fillStyleObj_swigregister(fillStyleObj)

class symbolStyleObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symbolStyleObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symbolStyleObj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["color"] = _mapscript.symbolStyleObj_color_set
    __swig_getmethods__["color"] = _mapscript.symbolStyleObj_color_get
    if _newclass:color = _swig_property(_mapscript.symbolStyleObj_color_get, _mapscript.symbolStyleObj_color_set)
    __swig_setmethods__["backgroundcolor"] = _mapscript.symbolStyleObj_backgroundcolor_set
    __swig_getmethods__["backgroundcolor"] = _mapscript.symbolStyleObj_backgroundcolor_get
    if _newclass:backgroundcolor = _swig_property(_mapscript.symbolStyleObj_backgroundcolor_get, _mapscript.symbolStyleObj_backgroundcolor_set)
    __swig_setmethods__["outlinewidth"] = _mapscript.symbolStyleObj_outlinewidth_set
    __swig_getmethods__["outlinewidth"] = _mapscript.symbolStyleObj_outlinewidth_get
    if _newclass:outlinewidth = _swig_property(_mapscript.symbolStyleObj_outlinewidth_get, _mapscript.symbolStyleObj_outlinewidth_set)
    __swig_setmethods__["outlinecolor"] = _mapscript.symbolStyleObj_outlinecolor_set
    __swig_getmethods__["outlinecolor"] = _mapscript.symbolStyleObj_outlinecolor_get
    if _newclass:outlinecolor = _swig_property(_mapscript.symbolStyleObj_outlinecolor_get, _mapscript.symbolStyleObj_outlinecolor_set)
    __swig_setmethods__["scale"] = _mapscript.symbolStyleObj_scale_set
    __swig_getmethods__["scale"] = _mapscript.symbolStyleObj_scale_get
    if _newclass:scale = _swig_property(_mapscript.symbolStyleObj_scale_get, _mapscript.symbolStyleObj_scale_set)
    __swig_setmethods__["rotation"] = _mapscript.symbolStyleObj_rotation_set
    __swig_getmethods__["rotation"] = _mapscript.symbolStyleObj_rotation_get
    if _newclass:rotation = _swig_property(_mapscript.symbolStyleObj_rotation_get, _mapscript.symbolStyleObj_rotation_set)
    def __init__(self, *args): 
        this = _mapscript.new_symbolStyleObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_symbolStyleObj
    __del__ = lambda self : None;
symbolStyleObj_swigregister = _mapscript.symbolStyleObj_swigregister
symbolStyleObj_swigregister(symbolStyleObj)

class tilecache(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tilecache, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tilecache, name)
    __repr__ = _swig_repr
    __swig_setmethods__["symbol"] = _mapscript.tilecache_symbol_set
    __swig_getmethods__["symbol"] = _mapscript.tilecache_symbol_get
    if _newclass:symbol = _swig_property(_mapscript.tilecache_symbol_get, _mapscript.tilecache_symbol_set)
    __swig_setmethods__["style"] = _mapscript.tilecache_style_set
    __swig_getmethods__["style"] = _mapscript.tilecache_style_get
    if _newclass:style = _swig_property(_mapscript.tilecache_style_get, _mapscript.tilecache_style_set)
    __swig_setmethods__["width"] = _mapscript.tilecache_width_set
    __swig_getmethods__["width"] = _mapscript.tilecache_width_get
    if _newclass:width = _swig_property(_mapscript.tilecache_width_get, _mapscript.tilecache_width_set)
    __swig_setmethods__["height"] = _mapscript.tilecache_height_set
    __swig_getmethods__["height"] = _mapscript.tilecache_height_get
    if _newclass:height = _swig_property(_mapscript.tilecache_height_get, _mapscript.tilecache_height_set)
    __swig_setmethods__["data"] = _mapscript.tilecache_data_set
    __swig_getmethods__["data"] = _mapscript.tilecache_data_get
    if _newclass:data = _swig_property(_mapscript.tilecache_data_get, _mapscript.tilecache_data_set)
    __swig_setmethods__["next"] = _mapscript.tilecache_next_set
    __swig_getmethods__["next"] = _mapscript.tilecache_next_get
    if _newclass:next = _swig_property(_mapscript.tilecache_next_get, _mapscript.tilecache_next_set)
    def __init__(self, *args): 
        this = _mapscript.new_tilecache(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_tilecache
    __del__ = lambda self : None;
tilecache_swigregister = _mapscript.tilecache_swigregister
tilecache_swigregister(tilecache)

class labelStyleObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, labelStyleObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, labelStyleObj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["font"] = _mapscript.labelStyleObj_font_set
    __swig_getmethods__["font"] = _mapscript.labelStyleObj_font_get
    if _newclass:font = _swig_property(_mapscript.labelStyleObj_font_get, _mapscript.labelStyleObj_font_set)
    __swig_setmethods__["size"] = _mapscript.labelStyleObj_size_set
    __swig_getmethods__["size"] = _mapscript.labelStyleObj_size_get
    if _newclass:size = _swig_property(_mapscript.labelStyleObj_size_get, _mapscript.labelStyleObj_size_set)
    __swig_setmethods__["rotation"] = _mapscript.labelStyleObj_rotation_set
    __swig_getmethods__["rotation"] = _mapscript.labelStyleObj_rotation_get
    if _newclass:rotation = _swig_property(_mapscript.labelStyleObj_rotation_get, _mapscript.labelStyleObj_rotation_set)
    __swig_setmethods__["color"] = _mapscript.labelStyleObj_color_set
    __swig_getmethods__["color"] = _mapscript.labelStyleObj_color_get
    if _newclass:color = _swig_property(_mapscript.labelStyleObj_color_get, _mapscript.labelStyleObj_color_set)
    __swig_setmethods__["outlinewidth"] = _mapscript.labelStyleObj_outlinewidth_set
    __swig_getmethods__["outlinewidth"] = _mapscript.labelStyleObj_outlinewidth_get
    if _newclass:outlinewidth = _swig_property(_mapscript.labelStyleObj_outlinewidth_get, _mapscript.labelStyleObj_outlinewidth_set)
    __swig_setmethods__["outlinecolor"] = _mapscript.labelStyleObj_outlinecolor_set
    __swig_getmethods__["outlinecolor"] = _mapscript.labelStyleObj_outlinecolor_get
    if _newclass:outlinecolor = _swig_property(_mapscript.labelStyleObj_outlinecolor_get, _mapscript.labelStyleObj_outlinecolor_set)
    __swig_setmethods__["shadowsizex"] = _mapscript.labelStyleObj_shadowsizex_set
    __swig_getmethods__["shadowsizex"] = _mapscript.labelStyleObj_shadowsizex_get
    if _newclass:shadowsizex = _swig_property(_mapscript.labelStyleObj_shadowsizex_get, _mapscript.labelStyleObj_shadowsizex_set)
    __swig_setmethods__["shadowsizey"] = _mapscript.labelStyleObj_shadowsizey_set
    __swig_getmethods__["shadowsizey"] = _mapscript.labelStyleObj_shadowsizey_get
    if _newclass:shadowsizey = _swig_property(_mapscript.labelStyleObj_shadowsizey_get, _mapscript.labelStyleObj_shadowsizey_set)
    __swig_setmethods__["shadowcolor"] = _mapscript.labelStyleObj_shadowcolor_set
    __swig_getmethods__["shadowcolor"] = _mapscript.labelStyleObj_shadowcolor_get
    if _newclass:shadowcolor = _swig_property(_mapscript.labelStyleObj_shadowcolor_get, _mapscript.labelStyleObj_shadowcolor_set)
    def __init__(self, *args): 
        this = _mapscript.new_labelStyleObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_labelStyleObj
    __del__ = lambda self : None;
labelStyleObj_swigregister = _mapscript.labelStyleObj_swigregister
labelStyleObj_swigregister(labelStyleObj)

class rectObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rectObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rectObj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["minx"] = _mapscript.rectObj_minx_set
    __swig_getmethods__["minx"] = _mapscript.rectObj_minx_get
    if _newclass:minx = _swig_property(_mapscript.rectObj_minx_get, _mapscript.rectObj_minx_set)
    __swig_setmethods__["miny"] = _mapscript.rectObj_miny_set
    __swig_getmethods__["miny"] = _mapscript.rectObj_miny_get
    if _newclass:miny = _swig_property(_mapscript.rectObj_miny_get, _mapscript.rectObj_miny_set)
    __swig_setmethods__["maxx"] = _mapscript.rectObj_maxx_set
    __swig_getmethods__["maxx"] = _mapscript.rectObj_maxx_get
    if _newclass:maxx = _swig_property(_mapscript.rectObj_maxx_get, _mapscript.rectObj_maxx_set)
    __swig_setmethods__["maxy"] = _mapscript.rectObj_maxy_set
    __swig_getmethods__["maxy"] = _mapscript.rectObj_maxy_get
    if _newclass:maxy = _swig_property(_mapscript.rectObj_maxy_get, _mapscript.rectObj_maxy_set)
    def __init__(self, *args): 
        this = _mapscript.new_rectObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_rectObj
    __del__ = lambda self : None;
    def project(*args): return _mapscript.rectObj_project(*args)
    def fit(*args): return _mapscript.rectObj_fit(*args)
    def draw(*args): return _mapscript.rectObj_draw(*args)
    def getCenter(*args): return _mapscript.rectObj_getCenter(*args)
    def toPolygon(*args): return _mapscript.rectObj_toPolygon(*args)
    def toString(*args): return _mapscript.rectObj_toString(*args)
    def __str__(self):
        return self.toString()
        
    def __contains__(self, item):
        item_type = str(type(item))
        if item_type == "<class 'mapscript.pointObj'>":
            if item.x >= self.minx and item.x <= self.maxx \
            and item.y >= self.miny and item.y <= self.maxy:
                return True
            else:
                return False
        else:
            raise TypeError, \
                '__contains__ does not yet handle %s' % (item_type)
        

rectObj_swigregister = _mapscript.rectObj_swigregister
rectObj_swigregister(rectObj)

class pointObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pointObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pointObj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _mapscript.pointObj_x_set
    __swig_getmethods__["x"] = _mapscript.pointObj_x_get
    if _newclass:x = _swig_property(_mapscript.pointObj_x_get, _mapscript.pointObj_x_set)
    __swig_setmethods__["y"] = _mapscript.pointObj_y_set
    __swig_getmethods__["y"] = _mapscript.pointObj_y_get
    if _newclass:y = _swig_property(_mapscript.pointObj_y_get, _mapscript.pointObj_y_set)
    def __init__(self, *args): 
        this = _mapscript.new_pointObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_pointObj
    __del__ = lambda self : None;
    def project(*args): return _mapscript.pointObj_project(*args)
    def draw(*args): return _mapscript.pointObj_draw(*args)
    def distanceToPoint(*args): return _mapscript.pointObj_distanceToPoint(*args)
    def distanceToSegment(*args): return _mapscript.pointObj_distanceToSegment(*args)
    def distanceToShape(*args): return _mapscript.pointObj_distanceToShape(*args)
    def setXY(*args): return _mapscript.pointObj_setXY(*args)
    def setXYZ(*args): return _mapscript.pointObj_setXYZ(*args)
    def setXYZM(*args): return _mapscript.pointObj_setXYZM(*args)
    def toString(*args): return _mapscript.pointObj_toString(*args)
    def toShape(*args): return _mapscript.pointObj_toShape(*args)
    def __str__(self):
        return self.toString()


pointObj_swigregister = _mapscript.pointObj_swigregister
pointObj_swigregister(pointObj)

class lineObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lineObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lineObj, name)
    __repr__ = _swig_repr
    __swig_getmethods__["numpoints"] = _mapscript.lineObj_numpoints_get
    if _newclass:numpoints = _swig_property(_mapscript.lineObj_numpoints_get)
    __swig_getmethods__["point"] = _mapscript.lineObj_point_get
    if _newclass:point = _swig_property(_mapscript.lineObj_point_get)
    def __init__(self, *args): 
        this = _mapscript.new_lineObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_lineObj
    __del__ = lambda self : None;
    def project(*args): return _mapscript.lineObj_project(*args)
    def get(*args): return _mapscript.lineObj_get(*args)
    def add(*args): return _mapscript.lineObj_add(*args)
    def set(*args): return _mapscript.lineObj_set(*args)
lineObj_swigregister = _mapscript.lineObj_swigregister
lineObj_swigregister(lineObj)

class shapeObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, shapeObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, shapeObj, name)
    __repr__ = _swig_repr
    __swig_getmethods__["numlines"] = _mapscript.shapeObj_numlines_get
    if _newclass:numlines = _swig_property(_mapscript.shapeObj_numlines_get)
    __swig_getmethods__["numvalues"] = _mapscript.shapeObj_numvalues_get
    if _newclass:numvalues = _swig_property(_mapscript.shapeObj_numvalues_get)
    __swig_getmethods__["line"] = _mapscript.shapeObj_line_get
    if _newclass:line = _swig_property(_mapscript.shapeObj_line_get)
    __swig_getmethods__["values"] = _mapscript.shapeObj_values_get
    if _newclass:values = _swig_property(_mapscript.shapeObj_values_get)
    __swig_setmethods__["bounds"] = _mapscript.shapeObj_bounds_set
    __swig_getmethods__["bounds"] = _mapscript.shapeObj_bounds_get
    if _newclass:bounds = _swig_property(_mapscript.shapeObj_bounds_get, _mapscript.shapeObj_bounds_set)
    __swig_setmethods__["type"] = _mapscript.shapeObj_type_set
    __swig_getmethods__["type"] = _mapscript.shapeObj_type_get
    if _newclass:type = _swig_property(_mapscript.shapeObj_type_get, _mapscript.shapeObj_type_set)
    __swig_setmethods__["index"] = _mapscript.shapeObj_index_set
    __swig_getmethods__["index"] = _mapscript.shapeObj_index_get
    if _newclass:index = _swig_property(_mapscript.shapeObj_index_get, _mapscript.shapeObj_index_set)
    __swig_setmethods__["tileindex"] = _mapscript.shapeObj_tileindex_set
    __swig_getmethods__["tileindex"] = _mapscript.shapeObj_tileindex_get
    if _newclass:tileindex = _swig_property(_mapscript.shapeObj_tileindex_get, _mapscript.shapeObj_tileindex_set)
    __swig_setmethods__["classindex"] = _mapscript.shapeObj_classindex_set
    __swig_getmethods__["classindex"] = _mapscript.shapeObj_classindex_get
    if _newclass:classindex = _swig_property(_mapscript.shapeObj_classindex_get, _mapscript.shapeObj_classindex_set)
    __swig_setmethods__["text"] = _mapscript.shapeObj_text_set
    __swig_getmethods__["text"] = _mapscript.shapeObj_text_get
    if _newclass:text = _swig_property(_mapscript.shapeObj_text_get, _mapscript.shapeObj_text_set)
    def __init__(self, *args): 
        this = _mapscript.new_shapeObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_shapeObj
    __del__ = lambda self : None;
    __swig_getmethods__["fromWKT"] = lambda x: _mapscript.shapeObj_fromWKT
    if _newclass:fromWKT = staticmethod(_mapscript.shapeObj_fromWKT)
    def project(*args): return _mapscript.shapeObj_project(*args)
    def get(*args): return _mapscript.shapeObj_get(*args)
    def add(*args): return _mapscript.shapeObj_add(*args)
    def draw(*args): return _mapscript.shapeObj_draw(*args)
    def setBounds(*args): return _mapscript.shapeObj_setBounds(*args)
    def clone(*args): return _mapscript.shapeObj_clone(*args)
    def copy(*args): return _mapscript.shapeObj_copy(*args)
    def toWKT(*args): return _mapscript.shapeObj_toWKT(*args)
    def buffer(*args): return _mapscript.shapeObj_buffer(*args)
    def simplify(*args): return _mapscript.shapeObj_simplify(*args)
    def topologyPreservingSimplify(*args): return _mapscript.shapeObj_topologyPreservingSimplify(*args)
    def convexHull(*args): return _mapscript.shapeObj_convexHull(*args)
    def boundary(*args): return _mapscript.shapeObj_boundary(*args)
    def getCentroid(*args): return _mapscript.shapeObj_getCentroid(*args)
    def Union(*args): return _mapscript.shapeObj_Union(*args)
    def intersection(*args): return _mapscript.shapeObj_intersection(*args)
    def difference(*args): return _mapscript.shapeObj_difference(*args)
    def symDifference(*args): return _mapscript.shapeObj_symDifference(*args)
    def overlaps(*args): return _mapscript.shapeObj_overlaps(*args)
    def within(*args): return _mapscript.shapeObj_within(*args)
    def crosses(*args): return _mapscript.shapeObj_crosses(*args)
    def intersects(*args): return _mapscript.shapeObj_intersects(*args)
    def touches(*args): return _mapscript.shapeObj_touches(*args)
    def equals(*args): return _mapscript.shapeObj_equals(*args)
    def disjoint(*args): return _mapscript.shapeObj_disjoint(*args)
    def getArea(*args): return _mapscript.shapeObj_getArea(*args)
    def getLength(*args): return _mapscript.shapeObj_getLength(*args)
    def getValue(*args): return _mapscript.shapeObj_getValue(*args)
    def contains(*args): return _mapscript.shapeObj_contains(*args)
    def distanceToPoint(*args): return _mapscript.shapeObj_distanceToPoint(*args)
    def distanceToShape(*args): return _mapscript.shapeObj_distanceToShape(*args)
    def getLabelPoint(*args): return _mapscript.shapeObj_getLabelPoint(*args)
    def setValue(*args): return _mapscript.shapeObj_setValue(*args)
    def initValues(*args): return _mapscript.shapeObj_initValues(*args)
shapeObj_swigregister = _mapscript.shapeObj_swigregister
shapeObj_swigregister(shapeObj)
shapeObj_fromWKT = _mapscript.shapeObj_fromWKT

SHX_BUFFER_PAGE = _mapscript.SHX_BUFFER_PAGE
MS_SHAPEFILE_POINT = _mapscript.MS_SHAPEFILE_POINT
MS_SHAPEFILE_ARC = _mapscript.MS_SHAPEFILE_ARC
MS_SHAPEFILE_POLYGON = _mapscript.MS_SHAPEFILE_POLYGON
MS_SHAPEFILE_MULTIPOINT = _mapscript.MS_SHAPEFILE_MULTIPOINT
MS_SHP_POINTZ = _mapscript.MS_SHP_POINTZ
MS_SHP_ARCZ = _mapscript.MS_SHP_ARCZ
MS_SHP_POLYGONZ = _mapscript.MS_SHP_POLYGONZ
MS_SHP_MULTIPOINTZ = _mapscript.MS_SHP_MULTIPOINTZ
MS_SHP_POINTM = _mapscript.MS_SHP_POINTM
MS_SHP_ARCM = _mapscript.MS_SHP_ARCM
MS_SHP_POLYGONM = _mapscript.MS_SHP_POLYGONM
MS_SHP_MULTIPOINTM = _mapscript.MS_SHP_MULTIPOINTM
class DBFInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DBFInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DBFInfo, name)
    __repr__ = _swig_repr
    __swig_getmethods__["fp"] = _mapscript.DBFInfo_fp_get
    if _newclass:fp = _swig_property(_mapscript.DBFInfo_fp_get)
    __swig_getmethods__["nRecords"] = _mapscript.DBFInfo_nRecords_get
    if _newclass:nRecords = _swig_property(_mapscript.DBFInfo_nRecords_get)
    __swig_getmethods__["nRecordLength"] = _mapscript.DBFInfo_nRecordLength_get
    if _newclass:nRecordLength = _swig_property(_mapscript.DBFInfo_nRecordLength_get)
    __swig_getmethods__["nHeaderLength"] = _mapscript.DBFInfo_nHeaderLength_get
    if _newclass:nHeaderLength = _swig_property(_mapscript.DBFInfo_nHeaderLength_get)
    __swig_getmethods__["nFields"] = _mapscript.DBFInfo_nFields_get
    if _newclass:nFields = _swig_property(_mapscript.DBFInfo_nFields_get)
    __swig_getmethods__["panFieldOffset"] = _mapscript.DBFInfo_panFieldOffset_get
    if _newclass:panFieldOffset = _swig_property(_mapscript.DBFInfo_panFieldOffset_get)
    __swig_getmethods__["panFieldSize"] = _mapscript.DBFInfo_panFieldSize_get
    if _newclass:panFieldSize = _swig_property(_mapscript.DBFInfo_panFieldSize_get)
    __swig_getmethods__["panFieldDecimals"] = _mapscript.DBFInfo_panFieldDecimals_get
    if _newclass:panFieldDecimals = _swig_property(_mapscript.DBFInfo_panFieldDecimals_get)
    __swig_getmethods__["pachFieldType"] = _mapscript.DBFInfo_pachFieldType_get
    if _newclass:pachFieldType = _swig_property(_mapscript.DBFInfo_pachFieldType_get)
    __swig_getmethods__["pszHeader"] = _mapscript.DBFInfo_pszHeader_get
    if _newclass:pszHeader = _swig_property(_mapscript.DBFInfo_pszHeader_get)
    __swig_getmethods__["nCurrentRecord"] = _mapscript.DBFInfo_nCurrentRecord_get
    if _newclass:nCurrentRecord = _swig_property(_mapscript.DBFInfo_nCurrentRecord_get)
    __swig_getmethods__["bCurrentRecordModified"] = _mapscript.DBFInfo_bCurrentRecordModified_get
    if _newclass:bCurrentRecordModified = _swig_property(_mapscript.DBFInfo_bCurrentRecordModified_get)
    __swig_getmethods__["pszCurrentRecord"] = _mapscript.DBFInfo_pszCurrentRecord_get
    if _newclass:pszCurrentRecord = _swig_property(_mapscript.DBFInfo_pszCurrentRecord_get)
    __swig_getmethods__["bNoHeader"] = _mapscript.DBFInfo_bNoHeader_get
    if _newclass:bNoHeader = _swig_property(_mapscript.DBFInfo_bNoHeader_get)
    __swig_getmethods__["bUpdated"] = _mapscript.DBFInfo_bUpdated_get
    if _newclass:bUpdated = _swig_property(_mapscript.DBFInfo_bUpdated_get)
    __swig_getmethods__["pszStringField"] = _mapscript.DBFInfo_pszStringField_get
    if _newclass:pszStringField = _swig_property(_mapscript.DBFInfo_pszStringField_get)
    __swig_getmethods__["nStringFieldLen"] = _mapscript.DBFInfo_nStringFieldLen_get
    if _newclass:nStringFieldLen = _swig_property(_mapscript.DBFInfo_nStringFieldLen_get)
    def getFieldName(*args): return _mapscript.DBFInfo_getFieldName(*args)
    def getFieldWidth(*args): return _mapscript.DBFInfo_getFieldWidth(*args)
    def getFieldDecimals(*args): return _mapscript.DBFInfo_getFieldDecimals(*args)
    def getFieldType(*args): return _mapscript.DBFInfo_getFieldType(*args)
    def __init__(self, *args): 
        this = _mapscript.new_DBFInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_DBFInfo
    __del__ = lambda self : None;
DBFInfo_swigregister = _mapscript.DBFInfo_swigregister
DBFInfo_swigregister(DBFInfo)

FTString = _mapscript.FTString
FTInteger = _mapscript.FTInteger
FTDouble = _mapscript.FTDouble
FTInvalid = _mapscript.FTInvalid
class shapefileObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, shapefileObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, shapefileObj, name)
    __repr__ = _swig_repr
    __swig_getmethods__["source"] = _mapscript.shapefileObj_source_get
    if _newclass:source = _swig_property(_mapscript.shapefileObj_source_get)
    __swig_getmethods__["type"] = _mapscript.shapefileObj_type_get
    if _newclass:type = _swig_property(_mapscript.shapefileObj_type_get)
    __swig_getmethods__["numshapes"] = _mapscript.shapefileObj_numshapes_get
    if _newclass:numshapes = _swig_property(_mapscript.shapefileObj_numshapes_get)
    __swig_getmethods__["bounds"] = _mapscript.shapefileObj_bounds_get
    if _newclass:bounds = _swig_property(_mapscript.shapefileObj_bounds_get)
    __swig_getmethods__["lastshape"] = _mapscript.shapefileObj_lastshape_get
    if _newclass:lastshape = _swig_property(_mapscript.shapefileObj_lastshape_get)
    __swig_getmethods__["status"] = _mapscript.shapefileObj_status_get
    if _newclass:status = _swig_property(_mapscript.shapefileObj_status_get)
    __swig_getmethods__["statusbounds"] = _mapscript.shapefileObj_statusbounds_get
    if _newclass:statusbounds = _swig_property(_mapscript.shapefileObj_statusbounds_get)
    __swig_getmethods__["isopen"] = _mapscript.shapefileObj_isopen_get
    if _newclass:isopen = _swig_property(_mapscript.shapefileObj_isopen_get)
    def __init__(self, *args): 
        this = _mapscript.new_shapefileObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_shapefileObj
    __del__ = lambda self : None;
    def get(*args): return _mapscript.shapefileObj_get(*args)
    def getShape(*args): return _mapscript.shapefileObj_getShape(*args)
    def getPoint(*args): return _mapscript.shapefileObj_getPoint(*args)
    def getTransformed(*args): return _mapscript.shapefileObj_getTransformed(*args)
    def getExtent(*args): return _mapscript.shapefileObj_getExtent(*args)
    def add(*args): return _mapscript.shapefileObj_add(*args)
    def addPoint(*args): return _mapscript.shapefileObj_addPoint(*args)
    def getDBF(*args): return _mapscript.shapefileObj_getDBF(*args)
shapefileObj_swigregister = _mapscript.shapefileObj_swigregister
shapefileObj_swigregister(shapefileObj)

class projectionObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, projectionObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, projectionObj, name)
    __repr__ = _swig_repr
    __swig_getmethods__["numargs"] = _mapscript.projectionObj_numargs_get
    if _newclass:numargs = _swig_property(_mapscript.projectionObj_numargs_get)
    def __init__(self, *args): 
        this = _mapscript.new_projectionObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_projectionObj
    __del__ = lambda self : None;
    def setWKTProjection(*args): return _mapscript.projectionObj_setWKTProjection(*args)
    def getUnits(*args): return _mapscript.projectionObj_getUnits(*args)
projectionObj_swigregister = _mapscript.projectionObj_swigregister
projectionObj_swigregister(projectionObj)

MS_SYMBOL_SIMPLE = _mapscript.MS_SYMBOL_SIMPLE
MS_SYMBOL_VECTOR = _mapscript.MS_SYMBOL_VECTOR
MS_SYMBOL_ELLIPSE = _mapscript.MS_SYMBOL_ELLIPSE
MS_SYMBOL_PIXMAP = _mapscript.MS_SYMBOL_PIXMAP
MS_SYMBOL_TRUETYPE = _mapscript.MS_SYMBOL_TRUETYPE
MS_SYMBOL_CARTOLINE = _mapscript.MS_SYMBOL_CARTOLINE
MS_SYMBOL_HATCH = _mapscript.MS_SYMBOL_HATCH
MS_SYMBOL_ALLOCSIZE = _mapscript.MS_SYMBOL_ALLOCSIZE
MS_MAXVECTORPOINTS = _mapscript.MS_MAXVECTORPOINTS
MS_MAXPATTERNLENGTH = _mapscript.MS_MAXPATTERNLENGTH
MS_IMAGECACHESIZE = _mapscript.MS_IMAGECACHESIZE
class colorObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, colorObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, colorObj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pen"] = _mapscript.colorObj_pen_set
    __swig_getmethods__["pen"] = _mapscript.colorObj_pen_get
    if _newclass:pen = _swig_property(_mapscript.colorObj_pen_get, _mapscript.colorObj_pen_set)
    __swig_setmethods__["red"] = _mapscript.colorObj_red_set
    __swig_getmethods__["red"] = _mapscript.colorObj_red_get
    if _newclass:red = _swig_property(_mapscript.colorObj_red_get, _mapscript.colorObj_red_set)
    __swig_setmethods__["green"] = _mapscript.colorObj_green_set
    __swig_getmethods__["green"] = _mapscript.colorObj_green_get
    if _newclass:green = _swig_property(_mapscript.colorObj_green_get, _mapscript.colorObj_green_set)
    __swig_setmethods__["blue"] = _mapscript.colorObj_blue_set
    __swig_getmethods__["blue"] = _mapscript.colorObj_blue_get
    if _newclass:blue = _swig_property(_mapscript.colorObj_blue_get, _mapscript.colorObj_blue_set)
    __swig_setmethods__["alpha"] = _mapscript.colorObj_alpha_set
    __swig_getmethods__["alpha"] = _mapscript.colorObj_alpha_get
    if _newclass:alpha = _swig_property(_mapscript.colorObj_alpha_get, _mapscript.colorObj_alpha_set)
    def __init__(self, *args): 
        this = _mapscript.new_colorObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_colorObj
    __del__ = lambda self : None;
    def setRGB(*args): return _mapscript.colorObj_setRGB(*args)
    def setHex(*args): return _mapscript.colorObj_setHex(*args)
    def toHex(*args): return _mapscript.colorObj_toHex(*args)
colorObj_swigregister = _mapscript.colorObj_swigregister
colorObj_swigregister(colorObj)

class symbolObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symbolObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symbolObj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _mapscript.symbolObj_name_set
    __swig_getmethods__["name"] = _mapscript.symbolObj_name_get
    if _newclass:name = _swig_property(_mapscript.symbolObj_name_get, _mapscript.symbolObj_name_set)
    __swig_setmethods__["type"] = _mapscript.symbolObj_type_set
    __swig_getmethods__["type"] = _mapscript.symbolObj_type_get
    if _newclass:type = _swig_property(_mapscript.symbolObj_type_get, _mapscript.symbolObj_type_set)
    __swig_setmethods__["inmapfile"] = _mapscript.symbolObj_inmapfile_set
    __swig_getmethods__["inmapfile"] = _mapscript.symbolObj_inmapfile_get
    if _newclass:inmapfile = _swig_property(_mapscript.symbolObj_inmapfile_get, _mapscript.symbolObj_inmapfile_set)
    __swig_setmethods__["sizex"] = _mapscript.symbolObj_sizex_set
    __swig_getmethods__["sizex"] = _mapscript.symbolObj_sizex_get
    if _newclass:sizex = _swig_property(_mapscript.symbolObj_sizex_get, _mapscript.symbolObj_sizex_set)
    __swig_setmethods__["sizey"] = _mapscript.symbolObj_sizey_set
    __swig_getmethods__["sizey"] = _mapscript.symbolObj_sizey_get
    if _newclass:sizey = _swig_property(_mapscript.symbolObj_sizey_get, _mapscript.symbolObj_sizey_set)
    __swig_setmethods__["minx"] = _mapscript.symbolObj_minx_set
    __swig_getmethods__["minx"] = _mapscript.symbolObj_minx_get
    if _newclass:minx = _swig_property(_mapscript.symbolObj_minx_get, _mapscript.symbolObj_minx_set)
    __swig_setmethods__["miny"] = _mapscript.symbolObj_miny_set
    __swig_getmethods__["miny"] = _mapscript.symbolObj_miny_get
    if _newclass:miny = _swig_property(_mapscript.symbolObj_miny_get, _mapscript.symbolObj_miny_set)
    __swig_setmethods__["maxx"] = _mapscript.symbolObj_maxx_set
    __swig_getmethods__["maxx"] = _mapscript.symbolObj_maxx_get
    if _newclass:maxx = _swig_property(_mapscript.symbolObj_maxx_get, _mapscript.symbolObj_maxx_set)
    __swig_setmethods__["maxy"] = _mapscript.symbolObj_maxy_set
    __swig_getmethods__["maxy"] = _mapscript.symbolObj_maxy_get
    if _newclass:maxy = _swig_property(_mapscript.symbolObj_maxy_get, _mapscript.symbolObj_maxy_set)
    __swig_getmethods__["refcount"] = _mapscript.symbolObj_refcount_get
    if _newclass:refcount = _swig_property(_mapscript.symbolObj_refcount_get)
    __swig_getmethods__["numpoints"] = _mapscript.symbolObj_numpoints_get
    if _newclass:numpoints = _swig_property(_mapscript.symbolObj_numpoints_get)
    __swig_setmethods__["filled"] = _mapscript.symbolObj_filled_set
    __swig_getmethods__["filled"] = _mapscript.symbolObj_filled_get
    if _newclass:filled = _swig_property(_mapscript.symbolObj_filled_get, _mapscript.symbolObj_filled_set)
    __swig_setmethods__["patternlength"] = _mapscript.symbolObj_patternlength_set
    __swig_getmethods__["patternlength"] = _mapscript.symbolObj_patternlength_get
    if _newclass:patternlength = _swig_property(_mapscript.symbolObj_patternlength_get, _mapscript.symbolObj_patternlength_set)
    __swig_setmethods__["pattern"] = _mapscript.symbolObj_pattern_set
    __swig_getmethods__["pattern"] = _mapscript.symbolObj_pattern_get
    if _newclass:pattern = _swig_property(_mapscript.symbolObj_pattern_get, _mapscript.symbolObj_pattern_set)
    __swig_getmethods__["imagepath"] = _mapscript.symbolObj_imagepath_get
    if _newclass:imagepath = _swig_property(_mapscript.symbolObj_imagepath_get)
    __swig_setmethods__["transparent"] = _mapscript.symbolObj_transparent_set
    __swig_getmethods__["transparent"] = _mapscript.symbolObj_transparent_get
    if _newclass:transparent = _swig_property(_mapscript.symbolObj_transparent_get, _mapscript.symbolObj_transparent_set)
    __swig_setmethods__["transparentcolor"] = _mapscript.symbolObj_transparentcolor_set
    __swig_getmethods__["transparentcolor"] = _mapscript.symbolObj_transparentcolor_get
    if _newclass:transparentcolor = _swig_property(_mapscript.symbolObj_transparentcolor_get, _mapscript.symbolObj_transparentcolor_set)
    __swig_setmethods__["character"] = _mapscript.symbolObj_character_set
    __swig_getmethods__["character"] = _mapscript.symbolObj_character_get
    if _newclass:character = _swig_property(_mapscript.symbolObj_character_get, _mapscript.symbolObj_character_set)
    __swig_setmethods__["antialias"] = _mapscript.symbolObj_antialias_set
    __swig_getmethods__["antialias"] = _mapscript.symbolObj_antialias_get
    if _newclass:antialias = _swig_property(_mapscript.symbolObj_antialias_get, _mapscript.symbolObj_antialias_set)
    __swig_setmethods__["font"] = _mapscript.symbolObj_font_set
    __swig_getmethods__["font"] = _mapscript.symbolObj_font_get
    if _newclass:font = _swig_property(_mapscript.symbolObj_font_get, _mapscript.symbolObj_font_set)
    __swig_setmethods__["gap"] = _mapscript.symbolObj_gap_set
    __swig_getmethods__["gap"] = _mapscript.symbolObj_gap_get
    if _newclass:gap = _swig_property(_mapscript.symbolObj_gap_get, _mapscript.symbolObj_gap_set)
    __swig_setmethods__["position"] = _mapscript.symbolObj_position_set
    __swig_getmethods__["position"] = _mapscript.symbolObj_position_get
    if _newclass:position = _swig_property(_mapscript.symbolObj_position_get, _mapscript.symbolObj_position_set)
    __swig_setmethods__["linecap"] = _mapscript.symbolObj_linecap_set
    __swig_getmethods__["linecap"] = _mapscript.symbolObj_linecap_get
    if _newclass:linecap = _swig_property(_mapscript.symbolObj_linecap_get, _mapscript.symbolObj_linecap_set)
    __swig_setmethods__["linejoin"] = _mapscript.symbolObj_linejoin_set
    __swig_getmethods__["linejoin"] = _mapscript.symbolObj_linejoin_get
    if _newclass:linejoin = _swig_property(_mapscript.symbolObj_linejoin_get, _mapscript.symbolObj_linejoin_set)
    __swig_setmethods__["linejoinmaxsize"] = _mapscript.symbolObj_linejoinmaxsize_set
    __swig_getmethods__["linejoinmaxsize"] = _mapscript.symbolObj_linejoinmaxsize_get
    if _newclass:linejoinmaxsize = _swig_property(_mapscript.symbolObj_linejoinmaxsize_get, _mapscript.symbolObj_linejoinmaxsize_set)
    def __init__(self, *args): 
        this = _mapscript.new_symbolObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_symbolObj
    __del__ = lambda self : None;
    def setImagepath(*args): return _mapscript.symbolObj_setImagepath(*args)
    def setPoints(*args): return _mapscript.symbolObj_setPoints(*args)
    def getPoints(*args): return _mapscript.symbolObj_getPoints(*args)
    def setPattern(*args): return _mapscript.symbolObj_setPattern(*args)
    def getImage(*args): return _mapscript.symbolObj_getImage(*args)
    def setImage(*args): return _mapscript.symbolObj_setImage(*args)
symbolObj_swigregister = _mapscript.symbolObj_swigregister
symbolObj_swigregister(symbolObj)

MS_NOERR = _mapscript.MS_NOERR
MS_IOERR = _mapscript.MS_IOERR
MS_MEMERR = _mapscript.MS_MEMERR
MS_TYPEERR = _mapscript.MS_TYPEERR
MS_SYMERR = _mapscript.MS_SYMERR
MS_REGEXERR = _mapscript.MS_REGEXERR
MS_TTFERR = _mapscript.MS_TTFERR
MS_DBFERR = _mapscript.MS_DBFERR
MS_GDERR = _mapscript.MS_GDERR
MS_IDENTERR = _mapscript.MS_IDENTERR
MS_EOFERR = _mapscript.MS_EOFERR
MS_PROJERR = _mapscript.MS_PROJERR
MS_MISCERR = _mapscript.MS_MISCERR
MS_CGIERR = _mapscript.MS_CGIERR
MS_WEBERR = _mapscript.MS_WEBERR
MS_IMGERR = _mapscript.MS_IMGERR
MS_HASHERR = _mapscript.MS_HASHERR
MS_JOINERR = _mapscript.MS_JOINERR
MS_NOTFOUND = _mapscript.MS_NOTFOUND
MS_SHPERR = _mapscript.MS_SHPERR
MS_PARSEERR = _mapscript.MS_PARSEERR
MS_SDEERR = _mapscript.MS_SDEERR
MS_OGRERR = _mapscript.MS_OGRERR
MS_QUERYERR = _mapscript.MS_QUERYERR
MS_WMSERR = _mapscript.MS_WMSERR
MS_WMSCONNERR = _mapscript.MS_WMSCONNERR
MS_ORACLESPATIALERR = _mapscript.MS_ORACLESPATIALERR
MS_WFSERR = _mapscript.MS_WFSERR
MS_WFSCONNERR = _mapscript.MS_WFSCONNERR
MS_MAPCONTEXTERR = _mapscript.MS_MAPCONTEXTERR
MS_HTTPERR = _mapscript.MS_HTTPERR
MS_CHILDERR = _mapscript.MS_CHILDERR
MS_WCSERR = _mapscript.MS_WCSERR
MS_GEOSERR = _mapscript.MS_GEOSERR
MS_RECTERR = _mapscript.MS_RECTERR
MS_TIMEERR = _mapscript.MS_TIMEERR
MS_GMLERR = _mapscript.MS_GMLERR
MS_SOSERR = _mapscript.MS_SOSERR
MS_NULLPARENTERR = _mapscript.MS_NULLPARENTERR
MS_AGGERR = _mapscript.MS_AGGERR
MS_OWSERR = _mapscript.MS_OWSERR
MS_NUMERRORCODES = _mapscript.MS_NUMERRORCODES
MS_OGLERR = _mapscript.MS_OGLERR
MESSAGELENGTH = _mapscript.MESSAGELENGTH
ROUTINELENGTH = _mapscript.ROUTINELENGTH
MS_ERROR_LANGUAGE = _mapscript.MS_ERROR_LANGUAGE
class errorObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, errorObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, errorObj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["code"] = _mapscript.errorObj_code_set
    __swig_getmethods__["code"] = _mapscript.errorObj_code_get
    if _newclass:code = _swig_property(_mapscript.errorObj_code_get, _mapscript.errorObj_code_set)
    __swig_setmethods__["routine"] = _mapscript.errorObj_routine_set
    __swig_getmethods__["routine"] = _mapscript.errorObj_routine_get
    if _newclass:routine = _swig_property(_mapscript.errorObj_routine_get, _mapscript.errorObj_routine_set)
    __swig_setmethods__["message"] = _mapscript.errorObj_message_set
    __swig_getmethods__["message"] = _mapscript.errorObj_message_get
    if _newclass:message = _swig_property(_mapscript.errorObj_message_get, _mapscript.errorObj_message_set)
    def __init__(self, *args): 
        this = _mapscript.new_errorObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_errorObj
    __del__ = lambda self : None;
    def next(*args): return _mapscript.errorObj_next(*args)
errorObj_swigregister = _mapscript.errorObj_swigregister
errorObj_swigregister(errorObj)

msGetErrorObj = _mapscript.msGetErrorObj
msResetErrorList = _mapscript.msResetErrorList
msGetVersion = _mapscript.msGetVersion
msGetVersionInt = _mapscript.msGetVersionInt
msGetErrorString = _mapscript.msGetErrorString
MS_DEBUGLEVEL_ERRORSONLY = _mapscript.MS_DEBUGLEVEL_ERRORSONLY
MS_DEBUGLEVEL_DEBUG = _mapscript.MS_DEBUGLEVEL_DEBUG
MS_DEBUGLEVEL_TUNING = _mapscript.MS_DEBUGLEVEL_TUNING
MS_DEBUGLEVEL_V = _mapscript.MS_DEBUGLEVEL_V
MS_DEBUGLEVEL_VV = _mapscript.MS_DEBUGLEVEL_VV
MS_DEBUGLEVEL_VVV = _mapscript.MS_DEBUGLEVEL_VVV
MS_HASHSIZE = _mapscript.MS_HASHSIZE
class hashTableObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, hashTableObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, hashTableObj, name)
    __repr__ = _swig_repr
    __swig_getmethods__["numitems"] = _mapscript.hashTableObj_numitems_get
    if _newclass:numitems = _swig_property(_mapscript.hashTableObj_numitems_get)
    def __init__(self, *args): 
        this = _mapscript.new_hashTableObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_hashTableObj
    __del__ = lambda self : None;
    def set(*args): return _mapscript.hashTableObj_set(*args)
    def get(*args): return _mapscript.hashTableObj_get(*args)
    def remove(*args): return _mapscript.hashTableObj_remove(*args)
    def clear(*args): return _mapscript.hashTableObj_clear(*args)
    def nextKey(*args): return _mapscript.hashTableObj_nextKey(*args)
hashTableObj_swigregister = _mapscript.hashTableObj_swigregister
hashTableObj_swigregister(hashTableObj)

MS_MAX_CGI_PARAMS = _mapscript.MS_MAX_CGI_PARAMS
MS_GET_REQUEST = _mapscript.MS_GET_REQUEST
MS_POST_REQUEST = _mapscript.MS_POST_REQUEST
class OWSRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OWSRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OWSRequest, name)
    __repr__ = _swig_repr
    __swig_getmethods__["NumParams"] = _mapscript.OWSRequest_NumParams_get
    if _newclass:NumParams = _swig_property(_mapscript.OWSRequest_NumParams_get)
    __swig_setmethods__["type"] = _mapscript.OWSRequest_type_set
    __swig_getmethods__["type"] = _mapscript.OWSRequest_type_get
    if _newclass:type = _swig_property(_mapscript.OWSRequest_type_get, _mapscript.OWSRequest_type_set)
    __swig_setmethods__["contenttype"] = _mapscript.OWSRequest_contenttype_set
    __swig_getmethods__["contenttype"] = _mapscript.OWSRequest_contenttype_get
    if _newclass:contenttype = _swig_property(_mapscript.OWSRequest_contenttype_get, _mapscript.OWSRequest_contenttype_set)
    __swig_setmethods__["postrequest"] = _mapscript.OWSRequest_postrequest_set
    __swig_getmethods__["postrequest"] = _mapscript.OWSRequest_postrequest_get
    if _newclass:postrequest = _swig_property(_mapscript.OWSRequest_postrequest_get, _mapscript.OWSRequest_postrequest_set)
    __swig_setmethods__["httpcookiedata"] = _mapscript.OWSRequest_httpcookiedata_set
    __swig_getmethods__["httpcookiedata"] = _mapscript.OWSRequest_httpcookiedata_get
    if _newclass:httpcookiedata = _swig_property(_mapscript.OWSRequest_httpcookiedata_get, _mapscript.OWSRequest_httpcookiedata_set)
    def __init__(self, *args): 
        this = _mapscript.new_OWSRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    def loadParams(*args): return _mapscript.OWSRequest_loadParams(*args)
    def setParameter(*args): return _mapscript.OWSRequest_setParameter(*args)
    def getName(*args): return _mapscript.OWSRequest_getName(*args)
    def getValue(*args): return _mapscript.OWSRequest_getValue(*args)
    def getValueByName(*args): return _mapscript.OWSRequest_getValueByName(*args)
    __swig_destroy__ = _mapscript.delete_OWSRequest
    __del__ = lambda self : None;
OWSRequest_swigregister = _mapscript.OWSRequest_swigregister
OWSRequest_swigregister(OWSRequest)

msConnPoolCloseUnreferenced = _mapscript.msConnPoolCloseUnreferenced
msIO_resetHandlers = _mapscript.msIO_resetHandlers
msIO_installStdoutToBuffer = _mapscript.msIO_installStdoutToBuffer
msIO_installStdinFromBuffer = _mapscript.msIO_installStdinFromBuffer
msIO_stripStdoutBufferContentType = _mapscript.msIO_stripStdoutBufferContentType
msIO_getStdoutBufferString = _mapscript.msIO_getStdoutBufferString
msIO_getStdoutBufferBytes = _mapscript.msIO_getStdoutBufferBytes
def fromstring(data, mappath=None):
    """Creates map objects from mapfile strings.

    Parameters
    ==========
    data : string
        Mapfile in a string.
    mappath : string
        Optional root map path, enabling relative paths in mapfile.

    Example
    =======
    >>> mo = fromstring("MAP\nNAME 'test'\nEND")
    >>> mo.name
    'test'
    """
    import re
    if re.search("^\s*MAP", data, re.I): 
        return msLoadMapFromString(data, mappath)
    elif re.search("^\s*LAYER", data, re.I):
        ob = layerObj()
        ob.updateFromString(data)
        return ob
    elif re.search("^\s*CLASS", data, re.I):
        ob = classObj()
        ob.updateFromString(data)
        return ob
    elif re.search("^\s*STYLE", data, re.I):
        ob = styleObj()
        ob.updateFromString(data)
        return ob
    else:
        raise ValueError, "No map, layer, class, or style found. Can not load from provided string"



